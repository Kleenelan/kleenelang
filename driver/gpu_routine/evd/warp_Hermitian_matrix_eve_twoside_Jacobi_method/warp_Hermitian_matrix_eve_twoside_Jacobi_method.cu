



// hello_HJ_world.cpp ``````````````````````````````````````````````````

//

#include <random>
#include <iostream>
#include "cuComplex.h"

using namespace std;
#define PRINT_CPU_ALL 0
#define NA 40

void print_matrix(float* A, int M, int N, int lda);
void print_vector(float* A, int n);
void print_complex_matrix(int M, int N, float2* A, int lda);
void print_complex_vector(float2* A, int n);

void complex_gemm(int M, int N, int K, float2* A, int lda, float2* B, int ldb, float2* C, int ldc);
void complex_matrix_conjugate_transposition(int n, float2* A, int lda, float2* B, int ldb);
__host__
__device__
float2 zero__ = { 0.0f,0.0f };


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template<typename T>
void swapf(T& x, T& y){
    T tmp;

    tmp = x;
    x = y;
    y = tmp;
}

template<typename T>
void swapi(T& x, T& y){
    T tmp;

    tmp = x;
    x = y;
    y = tmp;
}

template<typename T>
void sort(T* A, int n, unsigned* col_id) {
    int  arrayLength = n;
    bool oddSorted = false;//if false, then
    bool evenSorted = false;//if false, then

    for (unsigned idx = 0; idx < n; idx++) {
        col_id[idx] = idx;
    }

    while (!oddSorted || !evenSorted) {
        int base = 0;
        oddSorted = true;
        evenSorted = true;

        for (int i = base; i < arrayLength - 1; i += 2) {
            if (A[i] > A[i + 1]) {
                swapf(A[i], A[i + 1]);
                swapi(col_id[i], col_id[i + 1]);
                oddSorted = false;
            }
        }

        base = 1;
        for (int i = base; i < arrayLength - 1; i += 2) {
            if (A[i] > A[i + 1]) {
                swapf(A[i], A[i + 1]);
                swapi(col_id[i], col_id[i + 1]);
                evenSorted = false;
            }
        }
    }
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void set_V_2_E(unsigned n, float2* V, int ldv){
    float2 one_ = make_cuFloatComplex(1.0f, 0.0f);
    float2 zero_ = make_cuFloatComplex(0.0f, 0.0f);

    for (int j = 0; j < n; j++)
    {
        for (int i = 0; i < n; i++)
        {
            V[i + j * ldv] = zero_;
        }
    }

    for (int dia = 0; dia < n; dia++)
    {
        V[dia + dia * ldv] = one_;
    }
}

void norm_max_ij(float2* A, int n, int lda, int &p, int &q){
    float max = 0.0f;
    for (int i = 0; i < n; i++){
        for (int j = i + 1; j < n; j++){
            float tmp;
            tmp = cuCabsf(A[i + j * lda]);
            if (tmp > max){
                max = tmp;
                p = i;
                q = j;
            }
        }
    }
}

float signf(float a){
    union f_i
    {
        float a;
        int x;
    };
    union f_i tmp;
    tmp.a = a;

    return (tmp.x >> 31) ? -1.0f : 1.0f;
}

void cpu_hermite_jacobi(float2* A, int n, int lda, bool cal_Vectors, float2* V, int ldv, float* Sig, float eps, unsigned jt){
    set_V_2_E(n, V, ldv);
    printf("V=E=\n");
    print_complex_matrix(n, n, V, ldv);
    unsigned count = 0;

    while (count < jt) {
        count++;
        int i, j;

        i = 8;
        j = 9;
        norm_max_ij(A, n, lda, i, j);
        //printf("max_ele A(%d,%d) %d-th = %e+%e *i       ",i,j,count, A[i + j*lda].x, A[i+j*lda].y);
        //printf("max_ele A(%d,%d) %d-th  ", i, j, count);

        float s, c, t;
        float2 Aij;
        float norm_Aij;
        float Aii, Ajj;
        float Aii_Ajj;
        float2 s_plus, s_neg;

        Aii = A[i + i * lda].x;
        Ajj = A[j + j * lda].x;
        Aii_Ajj = Aii - Ajj;
        Aij = A[i + j * lda];
        norm_Aij = cuCabsf(Aij);
        if (norm_Aij < eps)break;

        t = 2.0f * norm_Aij * signf(Aii_Ajj) / (fabs(Aii_Ajj) + sqrt(Aii_Ajj * Aii_Ajj + 4.0f * norm_Aij * norm_Aij));
        c = 1.0f / sqrt(1 + t * t);
        s = c * t;
        float sDNAij;//s/|Aij|
        sDNAij = s / norm_Aij;
        s_plus = make_cuFloatComplex(sDNAij * Aij.x, sDNAij * Aij.y);
        s_neg = cuConjf(s_plus);

        //A[i + i * lda].x = Aii + t * norm_Aij; A[j + j * lda].x = Ajj - t * norm_Aij;
        float2 cC, sC;
        cC = make_cuFloatComplex(c, 0.0f);
        //sC = make_cuFloatComplex(s, 0.0f);

        for (int r = 0; r < n; r++) {// right_rotate  i-th column  j-th column  changed
            float2 Ari, Arj;
            Ari = A[r + i * lda];
            Arj = A[r + j * lda];
            //if(r!=i)
            A[r + i * lda] = cuCaddf(cuCmulf(Ari, cC), cuCmulf(Arj, s_neg));//Ari * c    + Arj * S-
            //if(r!=j)
            A[r + j * lda] = cuCsubf(cuCmulf(Arj, cC), cuCmulf(Ari, s_plus));//Ari *(-S+) + Arj * c
        }
        for (int r = 0; r < n; r++) {// left_rotate i-th row   j-th row changed
            float2 Air, Ajr;
            Air = A[i + r * lda];
            Ajr = A[j + r * lda];

            A[i + r * lda] = cuCaddf(cuCmulf(cC, Air), cuCmulf(s_plus, Ajr));//  c * Air   + S+ * Ajr
            A[j + r * lda] = cuCsubf(cuCmulf(cC, Ajr), cuCmulf(s_neg, Air));// -S-* Air   +  c * Ajr
        }

        A[i + j * lda] = zero__;
        A[j + i * lda] = zero__;
        float A_i_i = c * c * Aii + 2.0f * c * s * norm_Aij + s * s * Ajj;
        // printf("A[i,i] %d= %f\n", count, A[i+i*lda].x);
        // printf("A[i,i] %d= %f\n", count, A_i_i);
        float a_ii_look = Aii + t * norm_Aij;
       // printf("a_ii_ %d = %f\n", count, a_ii_look);

        float A_j_j = s * s * Aii - 2.0f * c * s * norm_Aij + c * c * Ajj;
        // printf("A[j,j] %d= %f\n", count, A[j + j * lda].x);
        // printf("A[j,j] %d= %f\n", count, A_j_j);
        float a_jj_look = Ajj - t * norm_Aij;
        //printf("a_jj_ %d = %f\n", count, a_jj_look);

        //A[i + i * lda].x = A_i_i;        A[i + i * lda].y = 0.0f;
        //A[j + j * lda].x = A_j_j;        A[j + j * lda].y = 0.0f;
        A[i + i * lda].x = a_ii_look;        A[i + i * lda].y = 0.0f;
        A[j + j * lda].x = a_jj_look;        A[j + j * lda].y = 0.0f;

        if (cal_Vectors) {
            for (int r = 0; r < n; r++) {// right_rotate  i-th column  j-th column  changed
                float2 Vri, Vrj;
                Vri = V[r + i * lda];
                Vrj = V[r + j * lda];
                V[r + i * lda] = cuCaddf(cuCmulf(Vri, cC), cuCmulf(Vrj, s_neg));//Ari * c    + Arj * S-
                V[r + j * lda] = cuCsubf(cuCmulf(Vrj, cC), cuCmulf(Vri, s_plus));//Ari *(-S+) + Arj * c
            }
        }
    }

    for (int dia = 0; dia < n; dia++) {
        Sig[dia] = A[dia + dia * lda].x;
    }
}

void Schur2_Hermite(float Aii, float Ajj, float2 Aij, float norm_Aij, float2 &cC, float2 &s_plus, float2 &s_neg, float &t)
{
        float Aii_Ajj = Aii - Ajj;
        t = 2.0f * norm_Aij * signf(Aii_Ajj) / (fabs(Aii_Ajj) + sqrt(Aii_Ajj * Aii_Ajj + 4.0f * norm_Aij * norm_Aij));
        float c = 1.0f / sqrt(1 + t * t);
        float s = c * t;
        float sDNAij;//s/|Aij|

        sDNAij = s / norm_Aij;
        s_plus = make_cuFloatComplex(sDNAij * Aij.x, sDNAij * Aij.y);
        s_neg = cuConjf(s_plus);

        //A[i + i * lda].x = Aii + t * norm_Aij; A[j + j * lda].x = Ajj - t * norm_Aij;
        //float2 cC;
        cC = make_cuFloatComplex(c, 0.0f);

}

void right_rotate_H(float2* A, int n, int lda, float2 cC, float2 s_neg, float2 s_plus, int i, int j)
{
    for (int r = 0; r < n; r++) {// right_rotate  i-th column  j-th column  changed
        float2 Ari, Arj;

        Ari = A[r + i * lda];
        Arj = A[r + j * lda];
        //if(r!=i)
        A[r + i * lda] = cuCaddf(cuCmulf(Ari, cC), cuCmulf(Arj, s_neg));//Ari * c    + Arj * S-
        //if(r!=j)
        A[r + j * lda] = cuCsubf(cuCmulf(Arj, cC), cuCmulf(Ari, s_plus));//Ari *(-S+) + Arj * c
    }
}

void left_rotate_H(float2* A, int n, int lda, float2 cC, float2 s_neg, float2 s_plus, int i, int j)
{
    for (int r = 0; r < n; r++) {// left_rotate i-th row   j-th row changed
        float2 Air, Ajr;

        Air = A[i + r * lda];
        Ajr = A[j + r * lda];

        A[i + r * lda] = cuCaddf(cuCmulf(cC, Air), cuCmulf(s_plus, Ajr));   //  c * Air   + S+ * Ajr
        A[j + r * lda] = cuCsubf(cuCmulf(cC, Ajr), cuCmulf(s_neg, Air));    // -S-* Air   +  c * Ajr
    }
}

void cpu_hermite_jacobi_03(float2* A, int n, int lda, bool cal_Vectors, float2* V, int ldv, float* Sig, float eps, unsigned jt){
    set_V_2_E(n, V, ldv);
    printf("V=E=\n");
    print_complex_matrix(n, n, V, ldv);
    unsigned count = 0;

    while (count < jt) {
        count++;
        int i, j;

        i = 8;
        j = 9;
        norm_max_ij(A, n, lda, i, j);
        //printf("max_ele A(%d,%d) %d-th = %e+%e *i       ",i,j,count, A[i + j*lda].x, A[i+j*lda].y);
        //printf("max_ele A(%d,%d) %d-th  ", i, j, count);

        float s, c, t;
        float2 Aij;
        float norm_Aij;
        float Aii, Ajj;
        //float Aii_Ajj;
        float2 s_plus, s_neg;

        Aii = A[i + i * lda].x;
        Ajj = A[j + j * lda].x;
        Aij = A[i + j * lda];

        norm_Aij = cuCabsf(Aij);
        if (norm_Aij < eps)break;

        float2 cC;

        Schur2_Hermite(Aii, Ajj, Aij, norm_Aij, cC, s_plus, s_neg, t);
        right_rotate_H(A, n, lda, cC, s_neg, s_plus, i, j);
        left_rotate_H(A, n, lda, cC, s_neg, s_plus, i, j);

        A[i + j * lda] = zero__;
        A[j + i * lda] = zero__;
        //float A_i_i = c * c * Aii + 2.0f * c * s * norm_Aij + s * s * Ajj;
        // printf("A[i,i] %d= %f\n", count, A[i+i*lda].x);
        // printf("A[i,i] %d= %f\n", count, A_i_i);
        float a_ii_look = Aii + t * norm_Aij;
       // printf("a_ii_ %d = %f\n", count, a_ii_look);

        //float A_j_j = s * s * Aii - 2.0f * c * s * norm_Aij + c * c * Ajj;
        // printf("A[j,j] %d= %f\n", count, A[j + j * lda].x);
        // printf("A[j,j] %d= %f\n", count, A_j_j);
        float a_jj_look = Ajj - t * norm_Aij;
        //printf("a_jj_ %d = %f\n", count, a_jj_look);

        //A[i + i * lda].x = A_i_i;        A[i + i * lda].y = 0.0f;
        //A[j + j * lda].x = A_j_j;        A[j + j * lda].y = 0.0f;
        A[i + i * lda].x = a_ii_look;        A[i + i * lda].y = 0.0f;
        A[j + j * lda].x = a_jj_look;        A[j + j * lda].y = 0.0f;

        if (cal_Vectors) {
            right_rotate_H(V, n, ldv, cC, s_neg, s_plus, i, j);
        }
    }

    for (int dia = 0; dia < n; dia++) {
        Sig[dia] = A[dia + dia * lda].x;
    }
}

void init_complex_matrix(int M, int N, float2* A, int lda) {
    random_device rd;
    mt19937 gen(rd());
    float range_start = -3.3f;
    float range_end = 3.3f;

    uniform_real_distribution<> dis(range_start, range_end);

    for (int i = 0; i < M; i++) {
        for (int j = 0; j < N; j++) {
            A[i + j * lda].x = dis(gen);
            A[i + j * lda].y = dis(gen);
        }
    }
}

void init_Hermitian_matrix(int N, float2* A, int lda) {
    float2 *a;

    a = (float2*)malloc(N * N * sizeof(float2));
    init_complex_matrix(N, N, a, N);
    float2* at;// [NA * NA] ;
    at = (float2*)malloc(N * N * sizeof(float2));
    complex_matrix_conjugate_transposition(N, a, N, at, N);
    complex_gemm(N, N, N, at, N, a, N, A, N);
}

int cpu_Hermite_matrix_complex_field(float2* A_h, int n, int lda)
{
    /*
    float2 A[NA * NA] =
    {
            {1.8937,  0.0000}, {1.4574, 0.2006}, {1.6041, -0.2653}, {2.3225, -0.3367},
            {1.4574, -0.2006}, {1.6985, 0.0000}, {1.6143, -0.2756}, {2.4423, -0.4715},
            {1.6041,  0.2653}, {1.6143, 0.2756}, {2.2980,  0.0000}, {2.3027,  0.2985},
            {2.3225,  0.3367}, {2.4423, 0.4715}, {2.3027, -0.2985}, {4.2158,  0.0000}
    };*/

    //init_Hermitian_matrix(NA, A, NA);
    float2* A = nullptr;
    A = (float2*)malloc(lda*n*sizeof(float2));
    memcpy(A, A_h, lda*n*sizeof(float2));

    float2* A_con = nullptr;
    A_con = (float2*)malloc(lda*n*sizeof(float2));
    memcpy(A_con, A, NA * NA * sizeof(float2));

    //int n = NA;
    //int lda = n;
    float2 V[NA * NA];

    int ldv = n;

    bool cal_eiV = true;
    float Sig[NA];
    float eps = 1.0e-19;
    unsigned jt = 3000;
    printf("A=\n");
    print_complex_matrix(n, n, A, lda);

    //cpu_hermite_jacobi(A, n, lda, cal_eiV, V, ldv, Sig, eps, jt);
    cpu_hermite_jacobi_03(A, n, lda, cal_eiV, V, ldv, Sig, eps, jt);


    printf("Sigma(raw)=\n");
    //print_complex_matrix(n, n, A, lda);
    print_vector(Sig, n);

    unsigned *col_id;
    col_id = (unsigned*)malloc(n * sizeof(unsigned));
    //template<typename T>
    //void sort(T * A, int n, unsigned* col_id)
    sort<float>(Sig, n, col_id);

    printf("\n\nSigma(sorted)=\n");
    //print_complex_matrix(n, n, A, lda);
    print_vector(Sig, n);

  #if PRINT_CPU_ALL

    printf("\n\nEigenVectors=\n");
    print_complex_matrix(n, n, V, ldv);

    //void complex_gemm(int M, int N, int K, float2 * A, int lda, float2 * B, int ldb, float2 * C, int ldc);
    //void complex_matrix_conjugate_transposition(int n, float2 * A, int lda, float2 * B, int ldb);
    float2 Vt[NA * NA];
    int ldvt = n;
    complex_matrix_conjugate_transposition(n, V, ldv, Vt, ldvt);
    printf("V'=\n");
    print_complex_matrix(n, n, Vt, ldvt);

    float2 VtxA[NA * NA];
    int ldvtxa = n;
    float2 VtxAxV[NA * NA];
    int ldvtxaxv = n;

    complex_gemm(n, n, n, Vt, ldvt, A_con, lda, VtxA, ldvtxa);
    complex_gemm(n, n, n, VtxA, ldvtxa, V, ldv, VtxAxV, ldvtxaxv);

    printf("VtxAxV=\n");
    print_complex_matrix(n, n, VtxAxV, ldvtxaxv);


    float2 E[NA * NA];
    int lde = n;
    complex_gemm(n, n, n, Vt, ldvt, V, ldv, E, lde);
    printf("E=VtxV=\n");
    print_complex_matrix(n, n, E, lde);
  #endif

    std::cout << "Hello World!\n";

    return 0;
}

__device__
float signf_thread(float a){
    union f_i
    {
        float a;
        int x;
    };
    union f_i tmp;
    tmp.a = a;

    return (tmp.x >> 31) ? -1.0f : 1.0f;
}

__device__
void Schur2_Hermite_thread(float Aii, float Ajj, float2 Aij, float norm_Aij, float2 &cC, float2 &s_plus, float2 &s_neg, float &t)
{
        float Aii_Ajj = Aii - Ajj;
        t = 2.0f * norm_Aij * signf_thread(Aii_Ajj) / (fabs(Aii_Ajj) + sqrt(Aii_Ajj * Aii_Ajj + 4.0f * norm_Aij * norm_Aij));
        float c = 1.0f / sqrt(1 + t * t);
        float s = c * t;
        float sDNAij;//s/|Aij|

        sDNAij = s / norm_Aij;
        s_plus = make_cuFloatComplex(sDNAij * Aij.x, sDNAij * Aij.y);
        s_neg = cuConjf(s_plus);
        cC = make_cuFloatComplex(c, 0.0f);
}

__device__
void right_rotate_H_thread(float2* A, int n, int lda, float2 cC, float2 s_neg, float2 s_plus, int i, int j)
{
    //for (int r = 0; r < n; r++) {// right_rotate  i-th column  j-th column  changed
    unsigned r = threadIdx.x;
    float2 Ari, Arj;

    Ari = A[r + i * lda];
    Arj = A[r + j * lda];
    //if(r!=i)
    A[r + i * lda] = cuCaddf(cuCmulf(Ari, cC), cuCmulf(Arj, s_neg));//Ari * c    + Arj * S-
    //if(r!=j)
    A[r + j * lda] = cuCsubf(cuCmulf(Arj, cC), cuCmulf(Ari, s_plus));//Ari *(-S+) + Arj * c
    //}
}

__device__
void left_rotate_H_thread(float2* A, int n, int lda, float2 cC, float2 s_neg, float2 s_plus, int i, int j)
{
    //for (int r = 0; r < n; r++) {// left_rotate i-th row   j-th row changed
    unsigned r = threadIdx.x;
    float2 Air, Ajr;

    Air = A[i + r * lda];
    Ajr = A[j + r * lda];

    A[i + r * lda] = cuCaddf(cuCmulf(cC, Air), cuCmulf(s_plus, Ajr));   //  c * Air   + S+ * Ajr
    A[j + r * lda] = cuCsubf(cuCmulf(cC, Ajr), cuCmulf(s_neg, Air));    // -S-* Air   +  c * Ajr
    //}
}

__device__
void set_V_2_E_thread(unsigned n, float2* V_d, int ldv){
    float2 one_ = make_cuFloatComplex(1.0f, 0.0f);
    float2 zero_ = make_cuFloatComplex(0.0f, 0.0f);

    unsigned tid = threadIdx.x;

    for (unsigned j = 0; j < n; j++)
    {
        V_d[tid + j * ldv] = zero_;
    }

    V_d[tid + tid * ldv] = one_;
}

__global__
void hermite_jacobi_kernel(float2* A, int n, int lda, bool cal_Vectors, float2* V, int ldv, float* Sig, float eps, unsigned jt){
    unsigned tid = threadIdx.x;
    if(tid<n)
        set_V_2_E_thread(n, V, ldv);

    unsigned count = 0;

    while (count < 30) {
        count++;
        for(int i=0; i<n-1; i++){
            for(int j=i+1; j<n; j++){


                float s, c, t;
                float2 Aij;
                float norm_Aij;
                float Aii, Ajj;
                float2 s_plus, s_neg;
                float2 cC;

                Aii = A[i + i * lda].x;
                Ajj = A[j + j * lda].x;
                Aij = A[i + j * lda];

                norm_Aij = cuCabsf(Aij);
                if (norm_Aij < eps)break;

                Schur2_Hermite_thread(Aii, Ajj, Aij, norm_Aij, cC, s_plus, s_neg, t);

                if(tid<n){
                    right_rotate_H_thread(A, n, lda, cC, s_neg, s_plus, i, j);
                    left_rotate_H_thread(A, n, lda, cC, s_neg, s_plus, i, j);
                }
 //#if ZERO_IJ
                if(tid==63){// third warp
                    A[i + j * lda] = zero__;
                    A[j + i * lda] = zero__;
                    //float A_i_i = c * c * Aii + 2.0f * c * s * norm_Aij + s * s * Ajj;
                    // printf("A[i,i] %d= %f\n", count, A[i+i*lda].x);
                    // printf("A[i,i] %d= %f\n", count, A_i_i);
                    float a_ii_look = Aii + t * norm_Aij;
                    // printf("a_ii_ %d = %f\n", count, a_ii_look);

                    //float A_j_j = s * s * Aii - 2.0f * c * s * norm_Aij + c * c * Ajj;
                    // printf("A[j,j] %d= %f\n", count, A[j + j * lda].x);
                    // printf("A[j,j] %d= %f\n", count, A_j_j);
                    float a_jj_look = Ajj - t * norm_Aij;
                    //printf("a_jj_ %d = %f\n", count, a_jj_look);

                    //A[i + i * lda].x = A_i_i;        A[i + i * lda].y = 0.0f;
                    //A[j + j * lda].x = A_j_j;        A[j + j * lda].y = 0.0f;
                    A[i + i * lda].x = a_ii_look;        A[i + i * lda].y = 0.0f;
                    A[j + j * lda].x = a_jj_look;        A[j + j * lda].y = 0.0f;
                }
 //#endif
                if (cal_Vectors) {// another warp do this
                    right_rotate_H_thread(V, n, ldv, cC, s_neg, s_plus, i, j);
                }
            }
        }
    }

    //for (int dia = 0; dia < n; dia++) {
    if(tid<n){
        Sig[tid] = A[tid + tid * lda].x;
    }
}

void gpu_hermite_jacobi(float2* A_d, int n, int lda, bool cal_Vectors, float2* V_d, int ldv, float* Sig, float eps, unsigned jt)
{
    dim3 grid_;
    dim3 block_;

    block_.x = 64;
//__global__ void hermite_jacobi_kernel(float2* A, int n, int lda, bool cal_Vectors, float2* V, int ldv, float* Sig, float eps, unsigned jt)



    cudaEvent_t start, end;
    cudaEventCreate(&start);
    cudaEventCreate(&end);
    // 开始计时
    cudaEventRecord(start);
    hermite_jacobi_kernel<<<grid_, block_, 0, NULL>>>(A_d, n, lda, cal_Vectors, V_d, ldv, Sig, eps, jt);

    cudaEventRecord(end);
    cudaEventSynchronize(end);
    // 统计时间
    float time_ms = 0.0f;
    cudaEventElapsedTime(&time_ms, start, end);
    std::cout << "CUDA Kernel time: " << time_ms << " ms" << std::endl;

    cudaEventDestroy(start);
    cudaEventDestroy(end);
}

void gpu_Hermite_matrix_complex_field(float2* A, int n, int lda)
{
    printf("gpu_Hermite_matrix_complex_field    n=%d, lda=%d\n", n, lda);
    float2* A_h = nullptr;

    A_h = (float2*)malloc(lda*n*sizeof(float2));
    memcpy(A_h, A, lda*n*sizeof(float2));

 #if PRINT_GPU
    printf("A_h[40x40] =\n");
    print_complex_matrix(n, n, A_h, lda);
 #endif

    int ldv = n;
    float2* A_d = nullptr;
    float2* V_d = nullptr;
    float* Sig_d = nullptr;

    cudaMalloc((void**)&A_d, lda*n*sizeof(float2));
    cudaMemcpy(A_d, A_h, lda*n*sizeof(float2), cudaMemcpyHostToDevice);
    cudaMalloc((void**)&V_d, ldv*n*sizeof(float2));
    cudaMalloc((void**)&Sig_d, n*sizeof(float));

    bool cal_eiV = true;
    float Sig[NA];
    float eps = 1.0e-3;
    unsigned jt = 3000;

    gpu_hermite_jacobi(A_d, n, lda, cal_eiV, V_d, ldv, Sig_d, eps, jt);

    float* Sig_h = nullptr;
    Sig_h = (float*)malloc(n*sizeof(float));
    cudaMemcpy(Sig_h, Sig_d, n*sizeof(float), cudaMemcpyDeviceToHost);
    printf("Sig_d(gpu)=\n");
    print_vector(Sig_h, n);

    unsigned *col_id;
    col_id = (unsigned*)malloc(n * sizeof(unsigned));
    sort<float>(Sig_h, n, col_id);
    printf("\n\nSigma(sorted) gpu=\n");
    print_vector(Sig_h, n);


 #if PRINT_GPU
    float2* A_hh = nullptr;
    float2* V_h = nullptr;

    A_hh = (float2*)malloc(lda*n*sizeof(float2));
    V_h  = (float2*)malloc(ldv*n*sizeof(float2));

    cudaMemcpy(A_hh, A_d, lda*n*sizeof(float2), cudaMemcpyDeviceToHost);
    cudaMemcpy(V_h, V_d, ldv*n*sizeof(float2), cudaMemcpyDeviceToHost);

    printf("A_d(sig gpu)=\n");
    print_complex_matrix(n, n, A_hh, lda);
    printf("V_d (gpu)=\n");
    print_complex_matrix(n,n,V_h, ldv);

    free(A_hh);
    free(V_h);

 #endif
    free(Sig_h);



}

int main(){

    float2 A_h[NA * NA] = {
        {3686522159104.000000, 0.000000}, {3670476849152.000000, -228742266880.000000}, {3620277846016.000000, -459511595008.000000}, {3534884175872.000000, -682323738624.000000}, {3418048954368.000000, -886447013888.000000}, {3278106001408.000000, -1063467220992.000000},
        {3124138082304.000000, -1206713188352.000000}, {2967104126976.000000, -1312211992576.000000}, {2816762445824.000000, -1381561663488.000000}, {2680696340480.000000, -1418516496384.000000}, {2565027135488.000000, -1428542586880.000000}, {2472976842752.000000, -1417251782656.000000},
        {2405135810560.000000, -1390434058240.000000}, {2360578408448.000000, -1352022491136.000000}, {2337939914752.000000, -1304115544064.000000}, {2335552307200.000000, -1248290406400.000000}, {2351949938688.000000, -1184023052288.000000}, {2383134851072.000000, -1111249518592.000000},
        {2424678645760.000000, -1028947640320.000000}, {2469907922944.000000, -938811719680.000000}, {2512470409216.000000, -841916481536.000000}, {2545332781056.000000, -741780291584.000000}, {2562925789184.000000, -644120838144.000000}, {2561197473792.000000, -555711463424.000000},
        {2540116901888.000000, -480776454144.000000}, {2500613636096.000000, -423444185088.000000}, {2446265155584.000000, -382680236032.000000}, {2380907151360.000000, -356262379520.000000}, {2308154064896.000000, -340977811456.000000}, {2230750806016.000000, -334378663936.000000},
        {2151692238848.000000, -334186348544.000000}, {2072772870144.000000, -338543181824.000000}, {1995888918528.000000, -343375806464.000000}, {1923409379328.000000, -346963116032.000000}, {1855803228160.000000, -347986132992.000000}, {1794051145728.000000, -346699071488.000000},
        {1738750164992.000000, -343414964224.000000}, {1690232291328.000000, -338663669760.000000}, {1648572366848.000000, -332849152000.000000}, {1613794770944.000000, -327038042112.000000}, {3670476849152.000000, 228742266880.000000}, {3687100710912.000000, 0.000000},
        {3669863432192.000000, -236536119296.000000}, {3616161660928.000000, -470933766144.000000}, {3528116928512.000000, -691917619200.000000}, {3412800569344.000000, -889829130240.000000}, {3278409039872.000000, -1056511885312.000000}, {3135483412480.000000, -1186206580736.000000},
        {2994180980736.000000, -1278902272000.000000}, {2862816690176.000000, -1337154338816.000000}, {2748544974848.000000, -1365446098944.000000}, {2655558565888.000000, -1368909283328.000000}, {2585418006528.000000, -1353251553280.000000}, {2537895755776.000000, -1322527358976.000000},
        {2512081649664.000000, -1278978162688.000000}, {2506655268864.000000, -1224309473280.000000}, {2520212045824.000000, -1158049038336.000000}, {2548612202496.000000, -1080482725888.000000}, {2587092058112.000000, -990950260736.000000}, {2628696670208.000000, -891842199552.000000},
        {2666762076160.000000, -785003905024.000000}, {2694104219648.000000, -674986786816.000000}, {2705395286016.000000, -568506449920.000000}, {2697055436800.000000, -473401491456.000000}, {2669514326016.000000, -394395811840.000000}, {2624339836928.000000, -335991242752.000000},
        {2565326503936.000000, -296967176192.000000}, {2496368738304.000000, -274725863424.000000}, {2420908752896.000000, -265568092160.000000}, {2341510840320.000000, -266672062464.000000}, {2260939046912.000000, -275348226048.000000}, {2180787470336.000000, -289483194368.000000},
        {2102653616128.000000, -304588980224.000000}, {2028758368256.000000, -318433755136.000000}, {1959458766848.000000, -329384460288.000000}, {1895735885824.000000, -337424220160.000000}, {1838268940288.000000, -342635479040.000000}, {1787531362304.000000, -345411649536.000000},
        {1743709536256.000000, -346000818176.000000}, {1707052498944.000000, -345421676544.000000}, {3620277846016.000000, 459511595008.000000}, {3669863432192.000000, 236536119296.000000}, {3687105953792.000000, 0.000000}, {3667761299456.000000, -240565288960.000000}, {3612188082176.000000, -473644531712.000000},
        {3525924880384.000000, -688566239232.000000}, {3415963336704.000000, -875836276736.000000}, {3292051537920.000000, -1027941793792.000000}, {3164426731520.000000, -1143136190464.000000}, {3041913995264.000000, -1222590726144.000000}, {2932532314112.000000, -1269568765952.000000},
        {2841372786688.000000, -1288500674560.000000}, {2770974277632.000000, -1284810604544.000000}, {2721849540608.000000, -1262531248128.000000}, {2693575737344.000000, -1223956234240.000000}, {2685209149440.000000, -1170846908416.000000}, {2695413891072.000000, -1102765621248.000000},
        {2719953715200.000000, -1020391456768.000000}, {2753767145472.000000, -923509194752.000000}, {2789719408640.000000, -815312404480.000000}, {2820953604096.000000, -698527514624.000000}, {2840317394944.000000, -578833416192.000000}, {2842925989888.000000, -463962767360.000000},
        {2825913892864.000000, -362787045376.000000}, {2790309756928.000000, -280466227200.000000}, {2738444828672.000000, -221754327040.000000}, {2674336464896.000000, -185179471872.000000}, {2601896378368.000000, -167727546368.000000}, {2524313288704.000000, -165211586560.000000},
        {2443912937472.000000, -174453489664.000000}, {2363151089664.000000, -192384319488.000000}, {2283375427584.000000, -216669028352.000000}, {2205784473600.000000, -242450006016.000000}, {2132340637696.000000, -267005476864.000000}, {2063198453760.000000, -288405487616.000000},
        {1999274115072.000000, -306358124544.000000}, {1941265448960.000000, -320696877056.000000}, {1889752449024.000000, -331642798080.000000}, {1844987297792.000000, -339260276736.000000}, {1807437266944.000000, -344468455424.000000}, {3534884175872.000000, 682323738624.000000},
        {3616161660928.000000, 470933766144.000000}, {3667761299456.000000, 240565288960.000000}, {3683942137856.000000, 0.000000}, {3663191605248.000000, -239392505856.000000}, {3609313148928.000000, -466209800192.000000}, {3527833026560.000000, -669852434432.000000}, {3427347726336.000000, -841201483776.000000},
        {3317818458112.000000, -976744218624.000000}, {3208306229248.000000, -1076141490176.000000}, {3107457859584.000000, -1141247442944.000000}, {3021129121792.000000, -1175592894464.000000}, {2952788967424.000000, -1184112705536.000000}, {2903688609792.000000, -1170658689024.000000},
        {2873902759936.000000, -1137476239360.000000}, {2862869118976.000000, -1086300160000.000000}, {2869321531392.000000, -1016705712128.000000}, {2888982331392.000000, -929789575168.000000}, {2916552802304.000000, -825857146880.000000}, {2944844431360.000000, -708979326976.000000},
        {2966958899200.000000, -582841466880.000000}, {2975982157824.000000, -454302466048.000000}, {2967671930880.000000, -332081496064.000000}, {2940111945728.000000, -225981513728.000000}, {2895056207872.000000, -141506002944.000000}, {2835691864064.000000, -83508961280.000000},
        {2766248607744.000000, -50200158208.000000}, {2690601975808.000000, -38115041280.000000}, {2611603832832.000000, -42602115072.000000}, {2531288678400.000000, -60153397248.000000}, {2451742130176.000000, -87371948032.000000}, {2374026657792.000000, -121747120128.000000}, {2298859225088.000000, -158123360256.000000},
        {2227833929728.000000, -193336213504.000000}, {2160826384384.000000, -225203159040.000000}, {2098615156736.000000, -253172367360.000000}, {2041855606784.000000, -276822654976.000000}, {1991185268736.000000, -296182448128.000000}, {1946874413056.000000, -311116857344.000000},
        {1909575778304.000000, -322394882048.000000}, {3418048954368.000000, 886447013888.000000}, {3528116928512.000000, 691917619200.000000}, {3612188082176.000000, 473644531712.000000}, {3663191605248.000000, 239392505856.000000}, {3677875863552.000000, 0.000000}, {3658139828224.000000, -232778055680.000000},
        {3607853793280.000000, -447519850496.000000}, {3534172717056.000000, -633742622720.000000}, {3446428663808.000000, -786245550080.000000}, {3353613172736.000000, -903144210432.000000}, {3264715161600.000000, -984767463424.000000}, {3186165809152.000000, -1033586933760.000000},
        {3122250383360.000000, -1053864886272.000000}, {3074913992704.000000, -1049118900224.000000}, {3044705566720.000000, -1021438263296.000000}, {3031426138112.000000, -972451217408.000000}, {3033868795904.000000, -901717164032.000000}, {3047774486528.000000, -810764206080.000000}, {3067682226176.000000, -700470657024.000000},
        {3086492631040.000000, -575825575936.000000}, {3097429540864.000000, -441510035456.000000}, {3094035824640.000000, -305554161664.000000}, {3072903872512.000000, -177584783360.000000}, {3033264291840.000000, -68178509824.000000}, {2977695793152.000000, 16951969792.000000},
        {2910291230720.000000, 73021513728.000000}, {2835465109504.000000, 102206078976.000000}, {2756993613824.000000, 108436512768.000000}, {2677324120064.000000, 96789995520.000000}, {2598150602752.000000, 71061200896.000000}, {2521142919168.000000, 34915086336.000000}, {2447058665472.000000, -9014761472.000000},
        {2376074264576.000000, -55369314304.000000}, {2309327159296.000000, -100622974976.000000}, {2246347063296.000000, -142393966592.000000}, {2187718033408.000000, -179913752576.000000}, {2133981790208.000000, -212523417600.000000}, {2085785174016.000000, -240046243840.000000}, {2043365163008.000000, -262152880128.000000}, {2007515529216.000000, -279425318912.000000}, {3278106001408.000000, 1063467220992.000000}, {3412800569344.000000, 889829130240.000000}, {3525924880384.000000, 688566239232.000000}, {3609313148928.000000, 466209800192.000000}, {3658139828224.000000, 232778055680.000000}, {3672464687104.000000, 0.000000}, {3654357090304.000000, -220233367552.000000}, {3609325993984.000000, -416364920832.000000}, {3545787793408.000000, -581669289984.000000}, {3472376725504.000000, -712779366400.000000}, {3398127321088.000000, -808471429120.000000}, {3329827012608.000000, -870067208192.000000}, {3272424554496.000000, -901015011328.000000}, {3228470345728.000000, -904371961856.000000}, {3198939824128.000000, -881978441728.000000}, {3183954100224.000000, -835277946880.000000}, {3182348730368.000000, -763787739136.000000}, {3189940158464.000000, -669461184512.000000}, {3201187446784.000000, -553770024960.000000}, {3209213509632.000000, -422618234880.000000}, {3207517437952.000000, -281669632000.000000}, {3190291431424.000000, -140063686656.000000}, {3155109347328.000000, -8211278848.000000}, {3102487085056.000000, 102727770112.000000}, {3035878916096.000000, 186967228416.000000}, {2960286023680.000000, 239958179840.000000}, {2880269713408.000000, 264308424704.000000}, {2799447834624.000000, 264415232000.000000}, {2719815565312.000000, 245723086848.000000}, {2642699878400.000000, 212266926080.000000}, {2569329967104.000000, 167908802560.000000}, {2500151214080.000000, 115355598848.000000}, {2434779054080.000000, 60071415808.000000}, {2373835816960.000000, 5848402432.000000}, {2316456951808.000000, -44805156864.000000}, {2262986653696.000000, -90952638464.000000}, {2213799264256.000000, -131726901248.000000}, {2169497976832.000000, -166754926592.000000}, {2130239029248.000000, -195522134016.000000}, {2096911089664.000000, -218402521088.000000}, {3124138082304.000000, 1206713188352.000000}, {3278409039872.000000, 1056511885312.000000}, {3415963336704.000000, 875836276736.000000}, {3527833026560.000000, 669852434432.000000}, {3607853793280.000000, 447519850496.000000}, {3654357090304.000000, 220233367552.000000}, {3667687636992.000000, 0.000000}, {3651555033088.000000, -200911863808.000000}, {3613240066048.000000, -374478143488.000000}, {3560781905920.000000, -515978067968.000000}, {3502980988928.000000, -622700396544.000000}, {3446753198080.000000, -694799106048.000000}, {3397527535616.000000, -734821023744.000000}, {3358344871936.000000, -745263005696.000000}, {3330534014976.000000, -727646666752.000000}, {3314476646400.000000, -683167776768.000000}, {3309026148352.000000, -611278389248.000000}, {3310121648128.000000, -514322202624.000000}, {3312215916544.000000, -394358652928.000000}, {3308773441536.000000, -258156560384.000000}, {3293698326528.000000, -112307535872.000000}, {3261975232512.000000, 33049348096.000000}, {3212253593600.000000, 166868189184.000000}, {3146401710080.000000, 277612724224.000000}, {3068758851584.000000, 359551860736.000000}, {2985192325120.000000, 408516853760.000000}, {2900366983168.000000, 427572199424.000000}, {2817701969920.000000, 421561335808.000000}, {2738708545536.000000, 396230426624.000000}, {2664347205632.000000, 355806642176.000000}, {2595401760768.000000, 304276406272.000000}, {2532023730176.000000, 244371587072.000000}, {2473269657600.000000, 181566406656.000000}, {2419222118400.000000, 119819657216.000000}, {2368603947008.000000, 61691944960.000000}, {2321488281600.000000, 8228740608.000000}, {2278038175744.000000, -39537295360.000000}, {2238770053120.000000, -81056079872.000000}, {2203711176704.000000, -115649134592.000000}, {2173797924864.000000, -143475638272.000000}, {2967104126976.000000, 1312211992576.000000}, {3135483412480.000000, 1186206580736.000000}, {3292051537920.000000, 1027941793792.000000}, {3427347726336.000000, 841201483776.000000}, {3534172717056.000000, 633742622720.000000}, {3609325993984.000000, 416364920832.000000}, {3651555033088.000000, 200911863808.000000}, {3662853701632.000000, 0.000000}, {3649189707776.000000, -177356636160.000000}, {3617833091072.000000, -325270044672.000000}, {3577125273600.000000, -439686692864.000000}, {3533904281600.000000, -519648804864.000000}, {3493885378560.000000, -566785540096.000000}, {3460464377856.000000, -582979092480.000000}, {3435237736448.000000, -569384763392.000000}, {3418775879680.000000, -526913437696.000000}, {3409926684672.000000, -454933086208.000000}, {3404783681536.000000, -356124000256.000000}, {3397854691328.000000, -233094856704.000000}, {3383024156672.000000, -93386448896.000000}, {3354694516736.000000, 55582089216.000000}, {3308728877056.000000, 202824925184.000000}, {3244872171520.000000, 336820436992.000000}, {3166325702656.000000, 445855498240.000000}, {3078274678784.000000, 524366512128.000000}, {2987365498880.000000, 568664588288.000000}, {2898325667840.000000, 582271238144.000000}, {2814344429568.000000, 570435108864.000000}, {2736460660736.000000, 539134787584.000000}, {2665269690368.000000, 492736708608.000000}, {2601142190080.000000, 435286245376.000000}, {2543964127232.000000, 369503043584.000000}, {2492275621888.000000, 300792053760.000000}, {2445628145664.000000, 233181986816.000000}, {2402337423360.000000, 169218998272.000000}, {2362204487680.000000, 110001119232.000000}, {2325155151872.000000, 56677367808.000000}, {2291587350528.000000, 9945822208.000000}, {2261373419520.000000, -29386940416.000000}, {2235447115776.000000, -61269983232.000000}, {2816762445824.000000, 1381561663488.000000}, {2994180980736.000000, 1278902272000.000000}, {3164426731520.000000, 1143136190464.000000}, {3317818458112.000000, 976744218624.000000}, {3446428663808.000000, 786245550080.000000}, {3545787793408.000000, 581669289984.000000}, {3613240066048.000000, 374478143488.000000}, {3649189707776.000000, 177356636160.000000}, {3658330406912.000000, 0.000000}, {3647012339712.000000, -150782902272.000000}, {3622968492032.000000, -269779402752.000000}, {3592807776256.000000, -355028729856.000000}, {3562361061376.000000, -407285170176.000000}, {3535242788864.000000, -427810291712.000000}, {3513231605760.000000, -417371914240.000000}, {3497017999360.000000, -376576671744.000000}, {3485420486656.000000, -304697933824.000000}, {3474699845632.000000, -204680364032.000000}, {3459461152768.000000, -79622225920.000000}, {3434040262656.000000, 62279249920.000000}, {3393372815360.000000, 212907524096.000000}, {3334214778880.000000, 360590934016.000000}, {3257360449536.000000, 493477855232.000000}, {3167253954560.000000, 599835672576.000000}, {3069850681344.000000, 674333655040.000000}, {2972472573952.000000, 713811165184.000000}, {2879879118848.000000, 722215960576.000000}, {2795027562496.000000, 705150124032.000000}, {2718513233920.000000, 668760932352.000000}, {2650606141440.000000, 617508110336.000000}, {2591303663616.000000, 555443027968.000000}, {2540267110400.000000, 485249941504.000000}, {2495580733440.000000, 412209020928.000000}, {2456302649344.000000, 340344406016.000000}, {2420368474112.000000, 272136568832.000000}, {2387316047872.000000, 208692101120.000000}, {2356830011392.000000, 151231201280.000000}, {2329168052224.000000, 100569931776.000000}, {2304032374784.000000, 57611681792.000000}, {2282323443712.000000, 22598418432.000000}, {2680696340480.000000, 1418516496384.000000}, {2862816690176.000000, 1337154338816.000000}, {3041913995264.000000, 1222590726144.000000}, {3208306229248.000000, 1076141490176.000000}, {3353613172736.000000, 903144210432.000000}, {3472376725504.000000, 712779366400.000000}, {3560781905920.000000, 515978067968.000000}, {3617833091072.000000, 325270044672.000000}, {3647012339712.000000, 150782902272.000000}, {3653789286400.000000, 0.000000}, {3645151641600.000000, -120940347392.000000}, {3627380113408.000000, -209202446336.000000}, {3606291152896.000000, -264744943616.000000}, {3585603796992.000000, -288245907456.000000}, {3567201026048.000000, -280089853952.000000}, {3551826018304.000000, -240576413696.000000}, {3538248794112.000000, -168873115648.000000}, {3522892398592.000000, -68121448448.000000}, {3500478824448.000000, 58173333504.000000}, {3465787473920.000000, 201282256896.000000}, {3414273818624.000000, 352521486336.000000}, {3343539503104.000000, 499689422848.000000}, {3255327522816.000000, 630723903488.000000}, {3155186941952.000000, 733980721152.000000}, {3049749479424.000000, 804386570240.000000}, {2946900164608.000000, 839305986048.000000}, {2851413426176.000000, 843064279040.000000}, {2766033387520.000000, 821557395456.000000}, {2690963996672.000000, 781044416512.000000}, {2626191360000.000000, 726048899072.000000}, {2571404574720.000000, 660593180672.000000}, {2526079614976.000000, 587312267264.000000}, {2487916953600.000000, 511330746368.000000}, {2455535878144.000000, 436616265728.000000}, {2426536722432.000000, 365558104064.000000}, {2400213532672.000000, 299237572608.000000}, {2376019214336.000000, 238910308352.000000}, {2354067800064.000000, 185480708096.000000}, {2333889265664.000000, 139919491072.000000}, {2316320636928.000000, 102637944832.000000}, {2565027135488.000000, 1428542586880.000000}, {2748544974848.000000, 1365446098944.000000}, {2932532314112.000000, 1269568765952.000000}, {3107457859584.000000, 1141247442944.000000}, {3264715161600.000000, 984767463424.000000}, {3398127321088.000000, 808471429120.000000}, {3502980988928.000000, 622700396544.000000}, {3577125273600.000000, 439686692864.000000}, {3622968492032.000000, 269779402752.000000}, {3645151641600.000000, 120940347392.000000}, {3649972207616.000000, 0.000000}, {3643282817024.000000, -89502908416.000000}, {3630799781888.000000, -146832293888.000000}, {3616273858560.000000, -172143050752.000000}, {3601623416832.000000, -165469995008.000000}, {3587597664256.000000, -126821113856.000000}, {3572906328064.000000, -55248658432.000000}, {3554107195392.000000, 45980446720.000000}, {3526033932288.000000, 173045694464.000000}, {3483855224832.000000, 316814360576.000000}, {3423486345216.000000, 468159692800.000000}, {3343259533312.000000, 614487621632.000000}, {3245727547392.000000, 743599177728.000000}, {3137363509248.000000, 843983683584.000000}, {3025366941696.000000, 910810218496.000000}, {2918084247552.000000, 941910130688.000000}, {2820305584128.000000, 941918650368.000000}, {2734601273344.000000, 916963328000.000000}, {2660855709696.000000, 873375793152.000000}, {2598831390720.000000, 815717154816.000000}, {2547967852544.000000, 747970428928.000000}, {2507607638016.000000, 672718716928.000000}, {2475145297920.000000, 594929385472.000000}, {2448828923904.000000, 518484754432.000000}, {2425966559232.000000, 445682352128.000000}, {2405642010624.000000, 377561284608.000000}, {2387101876224.000000, 315388755968.000000}, {2370316009472.000000, 260135452672.000000}, {2354658148352.000000, 212818575360.000000}, {2340884840448.000000, 173990461440.000000}, {2472976842752.000000, 1417251782656.000000}, {2655558565888.000000, 1368909283328.000000}, {2841372786688.000000, 1288500674560.000000}, {3021129121792.000000, 1175592894464.000000}, {3186165809152.000000, 1033586933760.000000}, {3329827012608.000000, 870067208192.000000}, {3446753198080.000000, 694799106048.000000}, {3533904281600.000000, 519648804864.000000}, {3592807776256.000000, 355028729856.000000}, {3627380113408.000000, 209202446336.000000}, {3643282817024.000000, 89502908416.000000}, {3646006231040.000000, 0.000000}, {3641063505920.000000, -58016804864.000000}, {3632189407232.000000, -84244316160.000000}, {3621309382656.000000, -78402486272.000000}, {3609138036736.000000, -40238133248.000000}, {3594321657856.000000, 31325474816.000000}, {3573523677184.000000, 132969578496.000000}, {3541650112512.000000, 260660772864.000000}, {3494170853376.000000, 404983644160.000000}, {3427351134208.000000, 556491997184.000000}, {3340100435968.000000, 702301536256.000000}, {3235589652480.000000, 830115086336.000000}, {3121019092992.000000, 928533577728.000000}, {3004045983744.000000, 992898121728.000000}, {2893384777728.000000, 1021402415104.000000}, {2793870458880.000000, 1018905362432.000000}, {2707957481472.000000, 991699140608.000000}, {2635298242560.000000, 946163548160.000000}, {2575496380416.000000, 886884859904.000000}, {2527813959680.000000, 817799299072.000000}, {2491500724224.000000, 741451497472.000000}, {2463722897408.000000, 662675193856.000000}, {2442426056704.000000, 585272000512.000000}, {2424679956480.000000, 511469256704.000000}, {2409386213376.000000, 442265042944.000000}, {2395617099776.000000, 378935967744.000000}, {2383214542848.000000, 322502623232.000000}, {2371410984960.000000, 274024054784.000000}, {2360886165504.000000, 234166468608.000000}, {2405135810560.000000, 1390434058240.000000}, {2585418006528.000000, 1353251553280.000000}, {2770974277632.000000, 1284810604544.000000}, {2952788967424.000000, 1184112705536.000000}, {3122250383360.000000, 1053864886272.000000}, {3272424554496.000000, 901015011328.000000}, {3397527535616.000000, 734821023744.000000}, {3493885378560.000000, 566785540096.000000}, {3562361061376.000000, 407285170176.000000}, {3606291152896.000000, 264744943616.000000}, {3630799781888.000000, 146832293888.000000}, {3641063505920.000000, 58016804864.000000}, {3642439761920.000000, 0.000000}, {3638569467904.000000, -26552111104.000000}, {3631372304384.000000, -21079672832.000000}, {3621521195008.000000, 16907334656.000000}, {3607600037888.000000, 88624234496.000000}, {3586336751616.000000, 190776049664.000000}, {3552666714112.000000, 319212158976.000000}, {3502240169984.000000, 464346415104.000000}, {3431538622464.000000, 616519761920.000000}, {3339861360640.000000, 762633781248.000000}, {3230799495168.000000, 890291552256.000000}, {3112070283264.000000, 988134178816.000000}, {2991683796992.000000, 1051570995200.000000}, {2878655168512.000000, 1079017209856.000000}, {2777898024960.000000, 1075459063808.000000}, {2691829334016.000000, 1047295688704.000000}, {2619956789248.000000, 1000928051200.000000}, {2561795948544.000000, 940971917312.000000}, {2516497465344.000000, 871322157056.000000}, {2483263635456.000000, 794497515520.000000}, {2459094745088.000000, 715243978752.000000}, {2441703063552.000000, 637308239872.000000}, {2427962785792.000000, 562890211328.000000}, {2416626630656.000000, 492967493632.000000}, {2406626885632.000000, 428835340288.000000}, {2397696163840.000000, 371563429888.000000}, {2388951302144.000000, 322254602240.000000}, {2381004406784.000000, 281668780032.000000}, {2360578408448.000000, 1352022491136.000000}, {2537895755776.000000, 1322527358976.000000}, {2721849540608.000000, 1262531248128.000000}, {2903688609792.000000, 1170658689024.000000}, {3074913992704.000000, 1049118900224.000000}, {3228470345728.000000, 904371961856.000000}, {3358344871936.000000, 745263005696.000000}, {3460464377856.000000, 582979092480.000000}, {3535242788864.000000, 427810291712.000000}, {3585603796992.000000, 288245907456.000000}, {3616273858560.000000, 172143050752.000000}, {3632189407232.000000, 84244316160.000000}, {3638569467904.000000, 26552111104.000000}, {3639014588416.000000, 0.000000}, {3635385466880.000000, 5374969856.000000}, {3628324356096.000000, 43388788736.000000}, {3616369803264.000000, 115411345408.000000}, {3596267814912.000000, 218238091264.000000}, {3562928078848.000000, 347707506688.000000}, {3512051695616.000000, 494165950464.000000}, {3440181510144.000000, 647831945216.000000}, {3346794545152.000000, 795452899328.000000}, {3235689267200.000000, 924494987264.000000}, {3114894884864.000000, 1023535153152.000000}, {2992671293440.000000, 1087914770432.000000}, {2878281875456.000000, 1116105211904.000000}, {2776764776448.000000, 1113113493504.000000}, {2690585198592.000000, 1085380034560.000000}, {2619202600960.000000, 1039319302144.000000}, {2562111569920.000000, 979570589696.000000}, {2518417408000.000000, 910008057856.000000}, {2487314546688.000000, 833138720768.000000}, {2465695531008.000000, 753675862016.000000}, {2451103285248.000000, 675358113792.000000}, {2440253669376.000000, 600416911360.000000}, {2431778553856.000000, 529840734208.000000}, {2424507727872.000000, 464969007104.000000}, {2418084675584.000000, 406927867904.000000}, {2411542609920.000000, 356880089088.000000}, {2405441208320.000000, 315664957440.000000}, {2337939914752.000000, 1304115544064.000000}, {2512081649664.000000, 1278978162688.000000}, {2693575737344.000000, 1223956234240.000000}, {2873902759936.000000, 1137476239360.000000}, {3044705566720.000000, 1021438263296.000000}, {3198939824128.000000, 881978441728.000000}, {3330534014976.000000, 727646666752.000000}, {3435237736448.000000, 569384763392.000000}, {3513231605760.000000, 417371914240.000000}, {3567201026048.000000, 280089853952.000000}, {3601623416832.000000, 165469995008.000000}, {3621309382656.000000, 78402486272.000000}, {3631372304384.000000, 21079672832.000000}, {3635385466880.000000, -5374969856.000000}, {3635213238272.000000, 0.000000}, {3631428927488.000000, 38109896704.000000}, {3622557188096.000000, 110506196992.000000}, {3605330395136.000000, 214139207680.000000}, {3574570680320.000000, 344948473856.000000}, {3525890015232.000000, 493315850240.000000}, {3455726649344.000000, 649431089152.000000}, {3363514351616.000000, 799926714368.000000}, {3253028782080.000000, 932097097728.000000}, {3132395880448.000000, 1034315104256.000000}, {3010017361920.000000, 1101707476992.000000}, {2895356100608.000000, 1132611371008.000000}, {2793626140672.000000, 1131934384128.000000}, {2707428737024.000000, 1106090262528.000000}, {2636277874688.000000, 1061497995264.000000}, {2579715588096.000000, 1002818895872.000000}, {2536866840576.000000, 933923258368.000000}, {2506955423744.000000, 857325174784.000000}, {2486824599552.000000, 777769582592.000000}, {2473903783936.000000, 699045249024.000000}, {2464799260672.000000, 623489449984.000000}, {2458046955520.000000, 552139358208.000000}, {2452413480960.000000, 486413041664.000000}, {2447478620160.000000, 427508269056.000000}, {2442224730112.000000, 376669634560.000000}, {2437185273856.000000, 334805434368.000000}, {2335552307200.000000, 1248290406400.000000}, {2506655268864.000000, 1224309473280.000000}, {2685209149440.000000, 1170846908416.000000}, {2862869118976.000000, 1086300160000.000000}, {3031426138112.000000, 972451217408.000000}, {3183954100224.000000, 835277946880.000000}, {3314476646400.000000, 683167776768.000000}, {3418775879680.000000, 526913437696.000000}, {3497017999360.000000, 376576671744.000000}, {3551826018304.000000, 240576413696.000000}, {3587597664256.000000, 126821113856.000000}, {3609138036736.000000, 40238133248.000000}, {3621521195008.000000, -16907334656.000000}, {3628324356096.000000, -43388788736.000000}, {3631428927488.000000, -38109896704.000000}, {3631416868864.000000, 0.000000}, {3626783997952.000000, 72690966528.000000}, {3614229135360.000000, 177144414208.000000}, {3588429971456.000000, 309510897664.000000}, {3544767528960.000000, 460322635776.000000}, {3479402184704.000000, 619837652992.000000}, {3391485116416.000000, 774621364224.000000}, {3284527480832.000000, 911745024000.000000}, {3166519689216.000000, 1019238744064.000000}, {3045879709696.000000, 1091845685248.000000}, {2932219576320.000000, 1127561428992.000000}, {2830975893504.000000, 1131064983552.000000}, {2744979030016.000000, 1108661239808.000000}, {2673894227968.000000, 1066758963200.000000}, {2617392234496.000000, 1010037358592.000000}, {2574675869696.000000, 942377861120.000000}, {2545041539072.000000, 866317434880.000000}, {2525336961024.000000, 786702008320.000000}, {2512941481984.000000, 707436412928.000000}, {2504398209024.000000, 631048896512.000000}, {2498179629056.000000, 558678016000.000000}, {2493029548032.000000, 491856494592.000000}, {2488496291840.000000, 431875588096.000000}, {2483549896704.000000, 380093431808.000000}, {2478725922816.000000, 337476878336.000000}, {2351949938688.000000, 1184023052288.000000}, {2520212045824.000000, 1158049038336.000000}, {2695413891072.000000, 1102765621248.000000}, {2869321531392.000000, 1016705712128.000000}, {3033868795904.000000, 901717164032.000000}, {3182348730368.000000, 763787739136.000000}, {3309026148352.000000, 611278389248.000000}, {3409926684672.000000, 454933086208.000000}, {3485420486656.000000, 304697933824.000000}, {3538248794112.000000, 168873115648.000000}, {3572906328064.000000, 55248658432.000000}, {3594321657856.000000, -31325474816.000000}, {3607600037888.000000, -88624234496.000000}, {3616369803264.000000, -115411345408.000000}, {3622557188096.000000, -110506196992.000000}, {3626783997952.000000, -72690966528.000000}, {3627613683712.000000, 0.000000}, {3621639421952.000000, 105050578944.000000}, {3603363528704.000000, 238954397696.000000}, {3567791898624.000000, 392516927488.000000}, {3510631137280.000000, 556185485312.000000}, {3430498172928.000000, 716521930752.000000}, {3330371223552.000000, 860338192384.000000}, {3217843552256.000000, 975173189632.000000}, {3101204152320.000000, 1055216893952.000000}, {2990137409536.000000, 1097896755200.000000}, {2890343645184.000000, 1107512655872.000000}, {2804966752256.000000, 1090166784000.000000}, {2733933068288.000000, 1052231008256.000000}, {2677114404864.000000, 998392594432.000000}, {2633863004160.000000, 932552900608.000000}, {2603588255744.000000, 857285132288.000000}, {2583206035456.000000, 777607249920.000000}, {2570118234112.000000, 697617219584.000000}, {2560860618752.000000, 620123979776.000000}, {2553879724032.000000, 546421964800.000000}, {2547949502464.000000, 478206984192.000000}, {2542622736384.000000, 416885604352.000000}, {2536902754304.000000, 363963973632.000000}, {2531364438016.000000, 320459472896.000000}, {2383134851072.000000, 1111249518592.000000}, {2548612202496.000000, 1080482725888.000000}, {2719953715200.000000, 1020391456768.000000}, {2888982331392.000000, 929789575168.000000}, {3047774486528.000000, 810764206080.000000}, {3189940158464.000000, 669461184512.000000}, {3310121648128.000000, 514322202624.000000}, {3404783681536.000000, 356124000256.000000}, {3474699845632.000000, 204680364032.000000}, {3522892398592.000000, 68121448448.000000}, {3554107195392.000000, -45980446720.000000}, {3573523677184.000000, -132969578496.000000}, {3586336751616.000000, -190776049664.000000}, {3596267814912.000000, -218238091264.000000}, {3605330395136.000000, -214139207680.000000}, {3614229135360.000000, -177144414208.000000}, {3621639421952.000000, -105050578944.000000}, {3624106459136.000000, 0.000000}, {3615877496832.000000, 134971121664.000000}, {3591484473344.000000, 291092692992.000000}, {3546025820160.000000, 459140759552.000000}, {3477346975744.000000, 625766432768.000000}, {3387621900288.000000, 777525788672.000000}, {3283774341120.000000, 901353701376.000000}, {3173785010176.000000, 990725799936.000000}, {3067301855232.000000, 1042286051328.000000}, {2970299400192.000000, 1059791306752.000000}, {2886305316864.000000, 1049027936256.000000}, {2815602720768.000000, 1016294408192.000000}, {2758341033984.000000, 966248628224.000000}, {2714079330304.000000, 902821249024.000000}, {2682382974976.000000, 828618375168.000000}, {2660305731584.000000, 748901957632.000000}, {2645349105664.000000, 668032499712.000000}, {2634115973120.000000, 589192232960.000000}, {2625071480832.000000, 513886027776.000000}, {2617080807424.000000, 444016263168.000000}, {2609740775424.000000, 381130801152.000000}, {2602144628736.000000, 326913425408.000000}, {2594944319488.000000, 282422444032.000000}, {2424678645760.000000, 1028947640320.000000}, {2587092058112.000000, 990950260736.000000}, {2753767145472.000000, 923509194752.000000}, {2916552802304.000000, 825857146880.000000}, {3067682226176.000000, 700470657024.000000}, {3201187446784.000000, 553770024960.000000}, {3312215916544.000000, 394358652928.000000}, {3397854691328.000000, 233094856704.000000}, {3459461152768.000000, 79622225920.000000}, {3500478824448.000000, -58173333504.000000}, {3526033932288.000000, -173045694464.000000}, {3541650112512.000000, -260660772864.000000}, {3552666714112.000000, -319212158976.000000}, {3562928078848.000000, -347707506688.000000}, {3574570680320.000000, -344948473856.000000}, {3588429971456.000000, -309510897664.000000}, {3603363528704.000000, -238954397696.000000}, {3615877496832.000000, -134971121664.000000}, {3620032217088.000000, 0.000000}, {3609754075136.000000, 157768581120.000000}, {3579438432256.000000, 329617178624.000000}, {3525953191936.000000, 502420176896.000000}, {3450406174720.000000, 662541172736.000000}, {3358760370176.000000, 796255191040.000000}, {3258480328704.000000, 896204734464.000000}, {3159022895104.000000, 958052630528.000000}, {3066601406464.000000, 984847089664.000000}, {2985167945728.000000, 981935128576.000000}, {2915439214592.000000, 955473526784.000000}, {2857903587328.000000, 910053670912.000000}, {2812384641024.000000, 849614602240.000000}, {2778637533184.000000, 776788443136.000000}, {2753935704064.000000, 697136971776.000000}, {2735970713600.000000, 615343128576.000000}, {2721502461952.000000, 535044751360.000000}, {2709074739200.000000, 458006822912.000000}, {2697711583232.000000, 386372108288.000000}, {2687109431296.000000, 321852407808.000000}, {2676514357248.000000, 266326900736.000000}, {2666689462272.000000, 220882894848.000000}, {2469907922944.000000, 938811719680.000000}, {2628696670208.000000, 891842199552.000000}, {2789719408640.000000, 815312404480.000000}, {2944844431360.000000, 708979326976.000000}, {3086492631040.000000, 575825575936.000000}, {3209213509632.000000, 422618234880.000000}, {3308773441536.000000, 258156560384.000000}, {3383024156672.000000, 93386448896.000000}, {3434040262656.000000, -62279249920.000000}, {3465787473920.000000, -201282256896.000000}, {3483855224832.000000, -316814360576.000000}, {3494170853376.000000, -404983644160.000000}, {3502240169984.000000, -464346415104.000000}, {3512051695616.000000, -494165950464.000000}, {3525890015232.000000, -493315850240.000000}, {3544767528960.000000, -460322635776.000000}, {3567791898624.000000, -392516927488.000000}, {3591484473344.000000, -291092692992.000000}, {3609754075136.000000, -157768581120.000000}, {3615967936512.000000, 0.000000}, {3603710869504.000000, 174177386496.000000}, {3568750034944.000000, 352046252032.000000}, {3510917398528.000000, 519892762624.000000}, {3434940727296.000000, 663358078976.000000}, {3347547947008.000000, 774196887552.000000}, {3257815793664.000000, 846948007936.000000}, {3172112793600.000000, 883805257728.000000}, {3094805741568.000000, 889540706304.000000}, {3027092111360.000000, 870090801152.000000}, {2969835143168.000000, 829916184576.000000}, {2923160666112.000000, 772938399744.000000}, {2887044038656.000000, 701794156544.000000}, {2859053350912.000000, 622374551552.000000}, {2837158821888.000000, 539727265792.000000}, {2818382233600.000000, 458002890752.000000}, {2801412866048.000000, 379271479296.000000}, {2785507540992.000000, 305931517952.000000}, {2770514477056.000000, 239872606208.000000}, {2755904929792.000000, 183181508608.000000}, {2742589587456.000000, 136950104064.000000}, {2512470409216.000000, 841916481536.000000}, {2666762076160.000000, 785003905024.000000}, {2820953604096.000000, 698527514624.000000}, {2966958899200.000000, 582841466880.000000}, {3097429540864.000000, 441510035456.000000}, {3207517437952.000000, 281669632000.000000}, {3293698326528.000000, 112307535872.000000}, {3354694516736.000000, -55582089216.000000}, {3393372815360.000000, -212907524096.000000}, {3414273818624.000000, -352521486336.000000}, {3423486345216.000000, -468159692800.000000}, {3427351134208.000000, -556491997184.000000}, {3431538622464.000000, -616519761920.000000}, {3440181510144.000000, -647831945216.000000}, {3455726649344.000000, -649431089152.000000}, {3479402184704.000000, -619837652992.000000}, {3510631137280.000000, -556185485312.000000}, {3546025820160.000000, -459140759552.000000}, {3579438432256.000000, -329617178624.000000}, {3603710869504.000000, -174177386496.000000}, {3611696824320.000000, 0.000000}, {3597943177216.000000, 180803928064.000000}, {3560877326336.000000, 354629615616.000000}, {3503762702336.000000, 506592624640.000000}, {3432365948928.000000, 627578503168.000000}, {3355164016640.000000, 710925680640.000000}, {3278551121920.000000, 757859680256.000000}, {3207249002496.000000, 772450942976.000000}, {3142938525696.000000, 760321933312.000000}, {3086871429120.000000, 725726068736.000000}, {3039487328256.000000, 672524926976.000000}, {3000994103296.000000, 603327954944.000000}, {2969331040256.000000, 524366249984.000000}, {2942836932608.000000, 441067274240.000000}, {2918903971840.000000, 358123143168.000000}, {2896439541760.000000, 277937324032.000000}, {2875016609792.000000, 203160649728.000000}, {2854688915456.000000, 135864115200.000000}, {2835219218432.000000, 78336180224.000000}, {2817699610624.000000, 31650320384.000000}, {2545332781056.000000, 741780291584.000000}, {2694104219648.000000, 674986786816.000000}, {2840317394944.000000, 578833416192.000000}, {2975982157824.000000, 454302466048.000000}, {3094035824640.000000, 305554161664.000000}, {3190291431424.000000, 140063686656.000000}, {3261975232512.000000, -33049348096.000000}, {3308728877056.000000, -202824925184.000000}, {3334214778880.000000, -360590934016.000000}, {3343539503104.000000, -499689422848.000000}, {3343259533312.000000, -614487621632.000000}, {3340100435968.000000, -702301536256.000000}, {3339861360640.000000, -762633781248.000000}, {3346794545152.000000, -795452899328.000000}, {3363514351616.000000, -799926714368.000000}, {3391485116416.000000, -774621364224.000000}, {3430498172928.000000, -716521930752.000000}, {3477346975744.000000, -625766432768.000000}, {3525953191936.000000, -502420176896.000000}, {3568750034944.000000, -352046252032.000000}, {3597943177216.000000, -180803928064.000000}, {3606957785088.000000, 0.000000}, {3592705277952.000000, 177085267968.000000}, {3556854988800.000000, 335233974272.000000}, {3504026157056.000000, 464559669248.000000}, {3441878892544.000000, 557214007296.000000}, {3376667688960.000000, 613389172736.000000}, {3313359388672.000000, 636352987136.000000}, {3254081290240.000000, 631319101440.000000}, {3200436142080.000000, 602252967936.000000}, {3153174724608.000000, 552904097792.000000}, {3112723546112.000000, 485814108160.000000}, {3077446303744.000000, 407532732416.000000}, {3046121406464.000000, 323857252352.000000}, {3016616312832.000000, 240018063360.000000}, {2988123357184.000000, 158751571968.000000}, {2960599285760.000000, 82952257536.000000}, {2934353690624.000000, 14863137792.000000}, {2909504274432.000000, -43051450368.000000}, {2887343144960.000000, -89757122560.000000}, {2562925789184.000000, 644120838144.000000}, {2705395286016.000000, 568506449920.000000}, {2842925989888.000000, 463962767360.000000}, {2967671930880.000000, 332081496064.000000}, {3072903872512.000000, 177584783360.000000}, {3155109347328.000000, 8211278848.000000}, {3212253593600.000000, -166868189184.000000}, {3244872171520.000000, -336820436992.000000}, {3257360449536.000000, -493477855232.000000}, {3255327522816.000000, -630723903488.000000}, {3245727547392.000000, -743599177728.000000}, {3235589652480.000000, -830115086336.000000}, {3230799495168.000000, -890291552256.000000}, {3235689267200.000000, -924494987264.000000}, {3253028782080.000000, -932097097728.000000}, {3284527480832.000000, -911745024000.000000}, {3330371223552.000000, -860338192384.000000}, {3387621900288.000000, -777525788672.000000}, {3450406174720.000000, -662541172736.000000}, {3510917398528.000000, -519892762624.000000}, {3560877326336.000000, -354629615616.000000}, {3592705277952.000000, -177085267968.000000}, {3601920163840.000000, 0.000000}, {3588500488192.000000, 161301168128.000000}, {3555820044288.000000, 296334131200.000000}, {3510544105472.000000, 396163317760.000000}, {3458612330496.000000, 459951079424.000000}, {3405092487168.000000, 490104651776.000000}, {3352468914176.000000, 491348885504.000000}, {3302631669760.000000, 467296780288.000000}, {3256592629760.000000, 421531156480.000000}, {3214970454016.000000, 356490280960.000000}, {3176572387328.000000, 278995828736.000000}, {3140662591488.000000, 195178741760.000000}, {3105656406016.000000, 110771445760.000000}, {3071091146752.000000, 28829702144.000000}, {3037354000384.000000, -47542210560.000000}, {3005052092416.000000, -115942555648.000000}, {2974703681536.000000, -173766049792.000000}, {2947811115008.000000, -220043444224.000000}, {2561197473792.000000, 555711463424.000000}, {2697055436800.000000, 473401491456.000000}, {2825913892864.000000, 362787045376.000000}, {2940111945728.000000, 225981513728.000000}, {3033264291840.000000, 68178509824.000000}, {3102487085056.000000, -102727770112.000000}, {3146401710080.000000, -277612724224.000000}, {3166325702656.000000, -445855498240.000000}, {3167253954560.000000, -599835672576.000000}, {3155186941952.000000, -733980721152.000000}, {3137363509248.000000, -843983683584.000000}, {3121019092992.000000, -928533577728.000000}, {3112070283264.000000, -988134178816.000000}, {3114894884864.000000, -1023535153152.000000}, {3132395880448.000000, -1034315104256.000000}, {3166519689216.000000, -1019238744064.000000}, {3217843552256.000000, -975173189632.000000}, {3283774341120.000000, -901353701376.000000}, {3358760370176.000000, -796255191040.000000}, {3434940727296.000000, -663358078976.000000}, {3503762702336.000000, -506592624640.000000}, {3556854988800.000000, -335233974272.000000}, {3588500488192.000000, -161301168128.000000}, {3597142851584.000000, 0.000000}, {3584837550080.000000, 137785180160.000000}, {3557180309504.000000, 242213519360.000000}, {3519642337280.000000, 311490117632.000000}, {3477236613120.000000, 347159920640.000000}, {3432681308160.000000, 353412022272.000000}, {3388053913600.000000, 333458309120.000000}, {3344556621824.000000, 290675392512.000000}, {3302939951104.000000, 227361898496.000000}, {3262434246656.000000, 150552788992.000000}, {3222783655936.000000, 66662432768.000000}, {3182982070272.000000, -18136049664.000000}, {3142939049984.000000, -100491386880.000000}, {3103494766592.000000, -177125523456.000000}, {3065569869824.000000, -245498789888.000000}, {3030102310912.000000, -302899265536.000000}, {2998807822336.000000, -348429910016.000000}, {2540116901888.000000, 480776454144.000000}, {2669514326016.000000, 394395811840.000000}, {2790309756928.000000, 280466227200.000000}, {2895056207872.000000, 141506002944.000000}, {2977695793152.000000, -16951969792.000000}, {3035878916096.000000, -186967228416.000000}, {3068758851584.000000, -359551860736.000000}, {3078274678784.000000, -524366512128.000000}, {3069850681344.000000, -674333655040.000000}, {3049749479424.000000, -804386570240.000000}, {3025366941696.000000, -910810218496.000000}, {3004045983744.000000, -992898121728.000000}, {2991683796992.000000, -1051570995200.000000}, {2992671293440.000000, -1087914770432.000000}, {3010017361920.000000, -1101707476992.000000}, {3045879709696.000000, -1091845685248.000000}, {3101204152320.000000, -1055216893952.000000}, {3173785010176.000000, -990725799936.000000}, {3258480328704.000000, -896204734464.000000}, {3347547947008.000000, -774196887552.000000}, {3432365948928.000000, -627578503168.000000}, {3504026157056.000000, -464559669248.000000}, {3555820044288.000000, -296334131200.000000}, {3584837550080.000000, -137785180160.000000}, {3591953186816.000000, 0.000000}, {3581631528960.000000, 106476871680.000000}, {3558784368640.000000, 179019071488.000000}, {3528229126144.000000, 218362724352.000000}, {3492780965888.000000, 228143628288.000000}, {3454597595136.000000, 211152011264.000000}, {3414977413120.000000, 170530013184.000000}, {3374731493376.000000, 108416253952.000000}, {3333451153408.000000, 31994836992.000000}, {3291317534720.000000, -52089249792.000000}, {3247887613952.000000, -137291898880.000000}, {3203440836608.000000, -220002172928.000000}, {3159260921856.000000, -296795209728.000000}, {3116584402944.000000, -365007896576.000000}, {3076761583616.000000, -421858344960.000000}, {3041711357952.000000, -466515591168.000000}, {2500613636096.000000, 423444185088.000000}, {2624339836928.000000, 335991242752.000000}, {2738444828672.000000, 221754327040.000000}, {2835691864064.000000, 83508961280.000000}, {2910291230720.000000, -73021513728.000000}, {2960286023680.000000, -239958179840.000000}, {2985192325120.000000, -408516853760.000000}, {2987365498880.000000, -568664588288.000000}, {2972472573952.000000, -713811165184.000000}, {2946900164608.000000, -839305986048.000000}, {2918084247552.000000, -941910130688.000000}, {2893384777728.000000, -1021402415104.000000}, {2878655168512.000000, -1079017209856.000000}, {2878281875456.000000, -1116105211904.000000}, {2895356100608.000000, -1132611371008.000000}, {2932219576320.000000, -1127561428992.000000}, {2990137409536.000000, -1097896755200.000000}, {3067301855232.000000, -1042286051328.000000}, {3159022895104.000000, -958052630528.000000}, {3257815793664.000000, -846948007936.000000}, {3355164016640.000000, -710925680640.000000}, {3441878892544.000000, -557214007296.000000}, {3510544105472.000000, -396163317760.000000}, {3557180309504.000000, -242213519360.000000}, {3581631528960.000000, -106476871680.000000}, {3587380609024.000000, 0.000000}, {3578686078976.000000, 73901613056.000000}, {3560081195008.000000, 115247054848.000000}, {3534349402112.000000, 127138136064.000000}, {3503618523136.000000, 111946588160.000000}, {3469182763008.000000, 72570437632.000000}, {3431834845184.000000, 10972594176.000000}, {3391425085440.000000, -65570508800.000000}, {3348478820352.000000, -150231613440.000000}, {3303046643712.000000, -236155535360.000000}, {3255743021056.000000, -319497535488.000000}, {3208250654720.000000, -396703268864.000000}, {3162100203520.000000, -464983195648.000000}, {3119029157888.000000, -521497509888.000000}, {3081141747712.000000, -565466300416.000000}, {2446265155584.000000, 382680236032.000000}, {2565326503936.000000, 296967176192.000000}, {2674336464896.000000, 185179471872.000000}, {2766248607744.000000, 50200158208.000000}, {2835465109504.000000, -102206078976.000000}, {2880269713408.000000, -264308424704.000000}, {2900366983168.000000, -427572199424.000000}, {2898325667840.000000, -582271238144.000000}, {2879879118848.000000, -722215960576.000000}, {2851413426176.000000, -843064279040.000000}, {2820305584128.000000, -941918650368.000000}, {2793870458880.000000, -1018905362432.000000}, {2777898024960.000000, -1075459063808.000000}, {2776764776448.000000, -1113113493504.000000}, {2793626140672.000000, -1131934384128.000000}, {2830975893504.000000, -1131064983552.000000}, {2890343645184.000000, -1107512655872.000000}, {2970299400192.000000, -1059791306752.000000}, {3066601406464.000000, -984847089664.000000}, {3172112793600.000000, -883805257728.000000}, {3278551121920.000000, -757859680256.000000}, {3376667688960.000000, -613389172736.000000}, {3458612330496.000000, -459951079424.000000}, {3519642337280.000000, -311490117632.000000}, {3558784368640.000000, -179019071488.000000}, {3578686078976.000000, -73901613056.000000}, {3583027707904.000000, 0.000000}, {3575943790592.000000, 42085814272.000000}, {3560108457984.000000, 54971584512.000000}, {3537520820224.000000, 40629301248.000000}, {3509383069696.000000, 1708967552.000000}, {3476390150144.000000, -60005818368.000000}, {3438534197248.000000, -137194815488.000000}, {3396568875008.000000, -222887313408.000000}, {3350930391040.000000, -309966569472.000000}, {3302514491392.000000, -394375561216.000000}, {3253333917696.000000, -472427134976.000000}, {3205174919168.000000, -541200318464.000000}, {3160119181312.000000, -597790883840.000000}, {3120438706176.000000, -641440481280.000000}, {2380907151360.000000, 356262379520.000000}, {2496368738304.000000, 274725863424.000000}, {2601896378368.000000, 167727546368.000000}, {2690601975808.000000, 38115041280.000000}, {2756993613824.000000, -108436512768.000000}, {2799447834624.000000, -264415232000.000000}, {2817701969920.000000, -421561335808.000000}, {2814344429568.000000, -570435108864.000000}, {2795027562496.000000, -705150124032.000000}, {2766033387520.000000, -821557395456.000000}, {2734601273344.000000, -916963328000.000000}, {2707957481472.000000, -991699140608.000000}, {2691829334016.000000, -1047295688704.000000}, {2690585198592.000000, -1085380034560.000000}, {2707428737024.000000, -1106090262528.000000}, {2744979030016.000000, -1108661239808.000000}, {2804966752256.000000, -1090166784000.000000}, {2886305316864.000000, -1049027936256.000000}, {2985167945728.000000, -981935128576.000000}, {3094805741568.000000, -889540706304.000000}, {3207249002496.000000, -772450942976.000000}, {3313359388672.000000, -636352987136.000000}, {3405092487168.000000, -490104651776.000000}, {3477236613120.000000, -347159920640.000000}, {3528229126144.000000, -218362724352.000000}, {3560081195008.000000, -115247054848.000000}, {3575943790592.000000, -42085814272.000000}, {3579607515136.000000, 0.000000}, {3573499297792.000000, 13183602688.000000}, {3559450738688.000000, -929010304.000000}, {3538492063744.000000, -39931191296.000000}, {3511161978880.000000, -102222979072.000000}, {3477465202688.000000, -180484718592.000000}, {3438258159616.000000, -267628675072.000000}, {3394238939136.000000, -356317167616.000000}, {3346501730304.000000, -442290143232.000000}, {3297314078720.000000, -521716662272.000000}, {3248665133056.000000, -591524200448.000000}, {3202925461504.000000, -648729395200.000000}, {3162513604608.000000, -692550696960.000000}, {2308154064896.000000, 340977811456.000000}, {2420908752896.000000, 265568092160.000000}, {2524313288704.000000, 165211586560.000000}, {2611603832832.000000, 42602115072.000000}, {2677324120064.000000, -96789995520.000000}, {2719815565312.000000, -245723086848.000000}, {2738708545536.000000, -396230426624.000000}, {2736460660736.000000, -539134787584.000000}, {2718513233920.000000, -668760932352.000000}, {2690963996672.000000, -781044416512.000000}, {2660855709696.000000, -873375793152.000000}, {2635298242560.000000, -946163548160.000000}, {2619956789248.000000, -1000928051200.000000}, {2619202600960.000000, -1039319302144.000000}, {2636277874688.000000, -1061497995264.000000}, {2673894227968.000000, -1066758963200.000000}, {2733933068288.000000, -1052231008256.000000}, {2815602720768.000000, -1016294408192.000000}, {2915439214592.000000, -955473526784.000000}, {3027092111360.000000, -870090801152.000000}, {3142938525696.000000, -760321933312.000000}, {3254081290240.000000, -631319101440.000000}, {3352468914176.000000, -491348885504.000000}, {3432681308160.000000, -353412022272.000000}, {3492780965888.000000, -228143628288.000000}, {3534349402112.000000, -127138136064.000000}, {3560108457984.000000, -54971584512.000000}, {3573499297792.000000, -13183602688.000000}, {3576735989760.000000, 0.000000}, {3571373309952.000000, -14160015360.000000}, {3558238584832.000000, -53489561600.000000}, {3537663426560.000000, -116578123776.000000}, {3509554249728.000000, -196140417024.000000}, {3474744147968.000000, -285004988416.000000}, {3434060447744.000000, -375641833472.000000}, {3388713467904.000000, -463598878720.000000}, {3341136166912.000000, -544878854144.000000}, {3293461872640.000000, -616240381952.000000}, {3248294985728.000000, -674589638656.000000}, {3208175157248.000000, -719088451584.000000}, {2230750806016.000000, 334378663936.000000}, {2341510840320.000000, 266672062464.000000}, {2443912937472.000000, 174453489664.000000}, {2531288678400.000000, 60153397248.000000}, {2598150602752.000000, -71061200896.000000}, {2642699878400.000000, -212266926080.000000}, {2664347205632.000000, -355806642176.000000}, {2665269690368.000000, -492736708608.000000}, {2650606141440.000000, -617508110336.000000}, {2626191360000.000000, -726048899072.000000}, {2598831390720.000000, -815717154816.000000}, {2575496380416.000000, -886884859904.000000}, {2561795948544.000000, -940971917312.000000}, {2562111569920.000000, -979570589696.000000}, {2579715588096.000000, -1002818895872.000000}, {2617392234496.000000, -1010037358592.000000}, {2677114404864.000000, -998392594432.000000}, {2758341033984.000000, -966248628224.000000}, {2857903587328.000000, -910053670912.000000}, {2969835143168.000000, -829916184576.000000}, {3086871429120.000000, -725726068736.000000}, {3200436142080.000000, -602252967936.000000}, {3302631669760.000000, -467296780288.000000}, {3388053913600.000000, -333458309120.000000}, {3454597595136.000000, -211152011264.000000}, {3503618523136.000000, -111946588160.000000}, {3537520820224.000000, -40629301248.000000}, {3559450738688.000000, 929010304.000000}, {3571373309952.000000, 14160015360.000000}, {3574626254848.000000, 0.000000}, {3569724948480.000000, -39615750144.000000}, {3556787617792.000000, -103463575552.000000}, {3535515156480.000000, -184332091392.000000}, {3506600148992.000000, -274991218688.000000}, {3470866513920.000000, -367754084352.000000}, {3429546590208.000000, -457981591552.000000}, {3385147523072.000000, -541491494912.000000}, {3339882332160.000000, -614853640192.000000}, {3296515850240.000000, -674828910592.000000}, {3257689178112.000000, -720481091584.000000}, {2151692238848.000000, 334186348544.000000}, {2260939046912.000000, 275348226048.000000}, {2363151089664.000000, 192384319488.000000}, {2451742130176.000000, 87371948032.000000}, {2521142919168.000000, -34915086336.000000}, {2569329967104.000000, -167908802560.000000}, {2595401760768.000000, -304276406272.000000}, {2601142190080.000000, -435286245376.000000}, {2591303663616.000000, -555443027968.000000}, {2571404574720.000000, -660593180672.000000}, {2547967852544.000000, -747970428928.000000}, {2527813959680.000000, -817799299072.000000}, {2516497465344.000000, -871322157056.000000}, {2518417408000.000000, -910008057856.000000}, {2536866840576.000000, -933923258368.000000}, {2574675869696.000000, -942377861120.000000}, {2633863004160.000000, -932552900608.000000}, {2714079330304.000000, -902821249024.000000}, {2812384641024.000000, -849614602240.000000}, {2923160666112.000000, -772938399744.000000}, {3039487328256.000000, -672524926976.000000}, {3153174724608.000000, -552904097792.000000}, {3256592629760.000000, -421531156480.000000}, {3344556621824.000000, -290675392512.000000}, {3414977413120.000000, -170530013184.000000}, {3469182763008.000000, -72570437632.000000}, {3509383069696.000000, -1708967552.000000}, {3538492063744.000000, 39931191296.000000}, {3558238584832.000000, 53489561600.000000}, {3569724948480.000000, 39615750144.000000}, {3573210415104.000000, 0.000000}, {3568519610368.000000, -64336330752.000000}, {3555078438912.000000, -146287673344.000000}, {3533333069824.000000, -238598733824.000000}, {3503974252544.000000, -333457555456.000000}, {3468165120000.000000, -426054615040.000000}, {3428389224448.000000, -512006553600.000000}, {3386867974144.000000, -587676975104.000000}, {3346455855104.000000, -649650831360.000000}, {3309858455552.000000, -696851628032.000000}, {2072772870144.000000, 338543181824.000000}, {2180787470336.000000, 289483194368.000000}, {2283375427584.000000, 216669028352.000000}, {2374026657792.000000, 121747120128.000000}, {2447058665472.000000, 9014761472.000000}, {2500151214080.000000, -115355598848.000000}, {2532023730176.000000, -244371587072.000000}, {2543964127232.000000, -369503043584.000000}, {2540267110400.000000, -485249941504.000000}, {2526079614976.000000, -587312267264.000000}, {2507607638016.000000, -672718716928.000000}, {2491500724224.000000, -741451497472.000000}, {2483263635456.000000, -794497515520.000000}, {2487314546688.000000, -833138720768.000000}, {2506955423744.000000, -857325174784.000000}, {2545041539072.000000, -866317434880.000000}, {2603588255744.000000, -857285132288.000000}, {2682382974976.000000, -828618375168.000000}, {2778637533184.000000, -776788443136.000000}, {2887044038656.000000, -701794156544.000000}, {3000994103296.000000, -603327954944.000000}, {3112723546112.000000, -485814108160.000000}, {3214970454016.000000, -356490280960.000000}, {3302939951104.000000, -227361898496.000000}, {3374731493376.000000, -108416253952.000000}, {3431834845184.000000, -10972594176.000000}, {3476390150144.000000, 60005818368.000000}, {3511161978880.000000, 102222979072.000000}, {3537663426560.000000, 116578123776.000000}, {3556787617792.000000, 103463575552.000000}, {3568519610368.000000, 64336330752.000000}, {3572456488960.000000, 0.000000}, {3567618359296.000000, -82596519936.000000}, {3554121613312.000000, -176199663616.000000}, {3532405866496.000000, -272915464192.000000}, {3503468052480.000000, -367783673856.000000}, {3469671137280.000000, -456213331968.000000}, {3433169420288.000000, -534350561280.000000}, {3396824727552.000000, -598575808512.000000}, {3363371745280.000000, -647634616320.000000}, {1995888918528.000000, 343375806464.000000}, {2102653616128.000000, 304588980224.000000}, {2205784473600.000000, 242450006016.000000}, {2298859225088.000000, 158123360256.000000}, {2376074264576.000000, 55369314304.000000}, {2434779054080.000000, -60071415808.000000}, {2473269657600.000000, -181566406656.000000}, {2492275621888.000000, -300792053760.000000}, {2495580733440.000000, -412209020928.000000}, {2487916953600.000000, -511330746368.000000}, {2475145297920.000000, -594929385472.000000}, {2463722897408.000000, -662675193856.000000}, {2459094745088.000000, -715243978752.000000}, {2465695531008.000000, -753675862016.000000}, {2486824599552.000000, -777769582592.000000}, {2525336961024.000000, -786702008320.000000}, {2583206035456.000000, -777607249920.000000}, {2660305731584.000000, -748901957632.000000}, {2753935704064.000000, -697136971776.000000}, {2859053350912.000000, -622374551552.000000}, {2969331040256.000000, -524366249984.000000}, {3077446303744.000000, -407532732416.000000}, {3176572387328.000000, -278995828736.000000}, {3262434246656.000000, -150552788992.000000}, {3333451153408.000000, -31994836992.000000}, {3391425085440.000000, 65570508800.000000}, {3438534197248.000000, 137194815488.000000}, {3477465202688.000000, 180484718592.000000}, {3509554249728.000000, 196140417024.000000}, {3535515156480.000000, 184332091392.000000}, {3555078438912.000000, 146287673344.000000}, {3567618359296.000000, 82596519936.000000}, {3571769933824.000000, 0.000000}, {3567194472448.000000, -94305001472.000000}, {3553993687040.000000, -192378339328.000000}, {3532926222336.000000, -289140178944.000000}, {3506150309888.000000, -379799437312.000000}, {3475681312768.000000, -460290850816.000000}, {3444315258880.000000, -526772109312.000000}, {3414772154368.000000, -577787068416.000000}, {1923409379328.000000, 346963116032.000000}, {2028758368256.000000, 318433755136.000000}, {2132340637696.000000, 267005476864.000000}, {2227833929728.000000, 193336213504.000000}, {2309327159296.000000, 100622974976.000000}, {2373835816960.000000, -5848402432.000000}, {2419222118400.000000, -119819657216.000000}, {2445628145664.000000, -233181986816.000000}, {2456302649344.000000, -340344406016.000000}, {2455535878144.000000, -436616265728.000000}, {2448828923904.000000, -518484754432.000000}, {2442426056704.000000, -585272000512.000000}, {2441703063552.000000, -637308239872.000000}, {2451103285248.000000, -675358113792.000000}, {2473903783936.000000, -699045249024.000000}, {2512941481984.000000, -707436412928.000000}, {2570118234112.000000, -697617219584.000000}, {2645349105664.000000, -668032499712.000000}, {2735970713600.000000, -615343128576.000000}, {2837158821888.000000, -539727265792.000000}, {2942836932608.000000, -441067274240.000000}, {3046121406464.000000, -323857252352.000000}, {3140662591488.000000, -195178741760.000000}, {3222783655936.000000, -66662432768.000000}, {3291317534720.000000, 52089249792.000000}, {3348478820352.000000, 150231613440.000000}, {3396568875008.000000, 222887313408.000000}, {3438258159616.000000, 267628675072.000000}, {3474744147968.000000, 285004988416.000000}, {3506600148992.000000, 274991218688.000000}, {3533333069824.000000, 238598733824.000000}, {3554121613312.000000, 176199663616.000000}, {3567194472448.000000, 94305001472.000000}, {3571780157440.000000, 0.000000}, {3567519006720.000000, -98791178240.000000}, {3554891005952.000000, -196895653888.000000}, {3535787786240.000000, -289343635456.000000}, {3512025481216.000000, -371875512320.000000}, {3486272716800.000000, -440421875712.000000}, {3461197332480.000000, -493314310144.000000}, {1855803228160.000000, 347986132992.000000}, {1959458766848.000000, 329384460288.000000}, {2063198453760.000000, 288405487616.000000}, {2160826384384.000000, 225203159040.000000}, {2246347063296.000000, 142393966592.000000}, {2316456951808.000000, 44805156864.000000}, {2368603947008.000000, -61691944960.000000}, {2402337423360.000000, -169218998272.000000}, {2420368474112.000000, -272136568832.000000}, {2426536722432.000000, -365558104064.000000}, {2425966559232.000000, -445682352128.000000}, {2424679956480.000000, -511469256704.000000}, {2427962785792.000000, -562890211328.000000}, {2440253669376.000000, -600416911360.000000}, {2464799260672.000000, -623489449984.000000}, {2504398209024.000000, -631048896512.000000}, {2560860618752.000000, -620123979776.000000}, {2634115973120.000000, -589192232960.000000}, {2721502461952.000000, -535044751360.000000}, {2818382233600.000000, -458002890752.000000}, {2918903971840.000000, -358123143168.000000}, {3016616312832.000000, -240018063360.000000}, {3105656406016.000000, -110771445760.000000}, {3182982070272.000000, 18136049664.000000}, {3247887613952.000000, 137291898880.000000}, {3303046643712.000000, 236155535360.000000}, {3350930391040.000000, 309966569472.000000}, {3394238939136.000000, 356317167616.000000}, {3434060447744.000000, 375641833472.000000}, {3470866513920.000000, 367754084352.000000}, {3503974252544.000000, 333457555456.000000}, {3532405866496.000000, 272915464192.000000}, {3553993687040.000000, 192378339328.000000}, {3567519006720.000000, 98791178240.000000}, {3572198014976.000000, 0.000000}, {3568142647296.000000, -98779627520.000000}, {3556954341376.000000, -192425115648.000000}, {3540216446976.000000, -276509425664.000000}, {3520414089216.000000, -346753236992.000000}, {3500136464384.000000, -401275813888.000000}, {1794051145728.000000, 346699071488.000000}, {1895735885824.000000, 337424220160.000000}, {1999274115072.000000, 306358124544.000000}, {2098615156736.000000, 253172367360.000000}, {2187718033408.000000, 179913752576.000000}, {2262986653696.000000, 90952638464.000000}, {2321488281600.000000, -8228740608.000000}, {2362204487680.000000, -110001119232.000000}, {2387316047872.000000, -208692101120.000000}, {2400213532672.000000, -299237572608.000000}, {2405642010624.000000, -377561284608.000000}, {2409386213376.000000, -442265042944.000000}, {2416626630656.000000, -492967493632.000000}, {2431778553856.000000, -529840734208.000000}, {2458046955520.000000, -552139358208.000000}, {2498179629056.000000, -558678016000.000000}, {2553879724032.000000, -546421964800.000000}, {2625071480832.000000, -513886027776.000000}, {2709074739200.000000, -458006822912.000000}, {2801412866048.000000, -379271479296.000000}, {2896439541760.000000, -277937324032.000000}, {2988123357184.000000, -158751571968.000000}, {3071091146752.000000, -28829702144.000000}, {3142939049984.000000, 100491386880.000000}, {3203440836608.000000, 220002172928.000000}, {3255743021056.000000, 319497535488.000000}, {3302514491392.000000, 394375561216.000000}, {3346501730304.000000, 442290143232.000000}, {3388713467904.000000, 463598878720.000000}, {3429546590208.000000, 457981591552.000000}, {3468165120000.000000, 426054615040.000000}, {3503468052480.000000, 367783673856.000000}, {3532926222336.000000, 289140178944.000000}, {3554891005952.000000, 196895653888.000000}, {3568142647296.000000, 98779627520.000000}, {3572479557632.000000, 0.000000}, {3569132503040.000000, -94215315456.000000}, {3559446806528.000000, -179299549184.000000}, {3545694470144.000000, -250788773888.000000}, {3530357473280.000000, -306603229184.000000}, {1738750164992.000000, 343414964224.000000}, {1838268940288.000000, 342635479040.000000}, {1941265448960.000000, 320696877056.000000}, {2041855606784.000000, 276822654976.000000}, {2133981790208.000000, 212523417600.000000}, {2213799264256.000000, 131726901248.000000}, {2278038175744.000000, 39537295360.000000}, {2325155151872.000000, -56677367808.000000}, {2356830011392.000000, -151231201280.000000}, {2376019214336.000000, -238910308352.000000}, {2387101876224.000000, -315388755968.000000}, {2395617099776.000000, -378935967744.000000}, {2406626885632.000000, -428835340288.000000}, {2424507727872.000000, -464969007104.000000}, {2452413480960.000000, -486413041664.000000}, {2493029548032.000000, -491856494592.000000}, {2547949502464.000000, -478206984192.000000}, {2617080807424.000000, -444016263168.000000}, {2697711583232.000000, -386372108288.000000}, {2785507540992.000000, -305931517952.000000}, {2875016609792.000000, -203160649728.000000}, {2960599285760.000000, -82952257536.000000}, {3037354000384.000000, 47542210560.000000}, {3103494766592.000000, 177125523456.000000}, {3159260921856.000000, 296795209728.000000}, {3208250654720.000000, 396703268864.000000}, {3253333917696.000000, 472427134976.000000}, {3297314078720.000000, 521716662272.000000}, {3341136166912.000000, 544878854144.000000}, {3385147523072.000000, 541491494912.000000}, {3428389224448.000000, 512006553600.000000}, {3469671137280.000000, 456213331968.000000}, {3506150309888.000000, 379799437312.000000}, {3535787786240.000000, 289343635456.000000}, {3556954341376.000000, 192425115648.000000}, {3569132503040.000000, 94215315456.000000}, {3573243445248.000000, 0.000000}, {3570334171136.000000, -85558091776.000000}, {3562464346112.000000, -157835853824.000000}, {3551994839040.000000, -214575202304.000000}, {1690232291328.000000, 338663669760.000000}, {1787531362304.000000, 345411649536.000000}, {1889752449024.000000, 331642798080.000000}, {1991185268736.000000, 296182448128.000000}, {2085785174016.000000, 240046243840.000000}, {2169497976832.000000, 166754926592.000000}, {2238770053120.000000, 81056079872.000000}, {2291587350528.000000, -9945822208.000000}, {2329168052224.000000, -100569931776.000000}, {2354067800064.000000, -185480708096.000000}, {2370316009472.000000, -260135452672.000000}, {2383214542848.000000, -322502623232.000000}, {2397696163840.000000, -371563429888.000000}, {2418084675584.000000, -406927867904.000000}, {2447478620160.000000, -427508269056.000000}, {2488496291840.000000, -431875588096.000000}, {2542622736384.000000, -416885604352.000000}, {2609740775424.000000, -381130801152.000000}, {2687109431296.000000, -321852407808.000000}, {2770514477056.000000, -239872606208.000000}, {2854688915456.000000, -135864115200.000000}, {2934353690624.000000, -14863137792.000000}, {3005052092416.000000, 115942555648.000000}, {3065569869824.000000, 245498789888.000000}, {3116584402944.000000, 365007896576.000000}, {3162100203520.000000, 464983195648.000000}, {3205174919168.000000, 541200318464.000000}, {3248665133056.000000, 591524200448.000000}, {3293461872640.000000, 616240381952.000000}, {3339882332160.000000, 614853640192.000000}, {3386867974144.000000, 587676975104.000000}, {3433169420288.000000, 534350561280.000000}, {3475681312768.000000, 460290850816.000000}, {3512025481216.000000, 371875512320.000000}, {3540216446976.000000, 276509425664.000000}, {3559446806528.000000, 179299549184.000000}, {3570334171136.000000, 85558091776.000000}, {3573701148672.000000, 0.000000}, {3571332939776.000000, -72637341696.000000}, {3565480050688.000000, -129936760832.000000}, {1648572366848.000000, 332849152000.000000}, {1743709536256.000000, 346000818176.000000}, {1844987297792.000000, 339260276736.000000}, {1946874413056.000000, 311116857344.000000}, {2043365163008.000000, 262152880128.000000}, {2130239029248.000000, 195522134016.000000}, {2203711176704.000000, 115649134592.000000}, {2261373419520.000000, 29386940416.000000}, {2304032374784.000000, -57611681792.000000}, {2333889265664.000000, -139919491072.000000}, {2354658148352.000000, -212818575360.000000}, {2371410984960.000000, -274024054784.000000}, {2388951302144.000000, -322254602240.000000}, {2411542609920.000000, -356880089088.000000}, {2442224730112.000000, -376669634560.000000}, {2483549896704.000000, -380093431808.000000}, {2536902754304.000000, -363963973632.000000}, {2602144628736.000000, -326913425408.000000}, {2676514357248.000000, -266326900736.000000}, {2755904929792.000000, -183181508608.000000}, {2835219218432.000000, -78336180224.000000}, {2909504274432.000000, 43051450368.000000}, {2974703681536.000000, 173766049792.000000}, {3030102310912.000000, 302899265536.000000}, {3076761583616.000000, 421858344960.000000}, {3119029157888.000000, 521497509888.000000}, {3160119181312.000000, 597790883840.000000}, {3202925461504.000000, 648729395200.000000}, {3248294985728.000000, 674589638656.000000}, {3296515850240.000000, 674828910592.000000}, {3346455855104.000000, 649650831360.000000}, {3396824727552.000000, 598575808512.000000}, {3444315258880.000000, 526772109312.000000}, {3486272716800.000000, 440421875712.000000}, {3520414089216.000000, 346753236992.000000}, {3545694470144.000000, 250788773888.000000}, {3562464346112.000000, 157835853824.000000}, {3571332939776.000000, 72637341696.000000}, {3573890940928.000000, 0.000000}, {3572222132224.000000, -57538330624.000000}, {1613794770944.000000, 327038042112.000000}, {1707052498944.000000, 345421676544.000000}, {1807437266944.000000, 344468455424.000000}, {1909575778304.000000, 322394882048.000000}, {2007515529216.000000, 279425318912.000000}, {2096911089664.000000, 218402521088.000000}, {2173797924864.000000, 143475638272.000000}, {2235447115776.000000, 61269983232.000000}, {2282323443712.000000, -22598418432.000000}, {2316320636928.000000, -102637944832.000000}, {2340884840448.000000, -173990461440.000000}, {2360886165504.000000, -234166468608.000000}, {2381004406784.000000, -281668780032.000000}, {2405441208320.000000, -315664957440.000000}, {2437185273856.000000, -334805434368.000000}, {2478725922816.000000, -337476878336.000000}, {2531364438016.000000, -320459472896.000000}, {2594944319488.000000, -282422444032.000000}, {2666689462272.000000, -220882894848.000000}, {2742589587456.000000, -136950104064.000000}, {2817699610624.000000, -31650320384.000000}, {2887343144960.000000, 89757122560.000000}, {2947811115008.000000, 220043444224.000000}, {2998807822336.000000, 348429910016.000000}, {3041711357952.000000, 466515591168.000000}, {3081141747712.000000, 565466300416.000000}, {3120438706176.000000, 641440481280.000000}, {3162513604608.000000, 692550696960.000000}, {3208175157248.000000, 719088451584.000000}, {3257689178112.000000, 720481091584.000000}, {3309858455552.000000, 696851628032.000000}, {3363371745280.000000, 647634616320.000000}, {3414772154368.000000, 577787068416.000000}, {3461197332480.000000, 493314310144.000000}, {3500136464384.000000, 401275813888.000000}, {3530357473280.000000, 306603229184.000000}, {3551994839040.000000, 214575202304.000000}, {3565480050688.000000, 129936760832.000000}, {3572222132224.000000, 57538330624.000000}, {3574213902336.000000, 0.000000}

    };

    int n = NA;
    int lda = n;

    //cpu_Hermite_matrix_complex_field(A_h, n, lda);
    gpu_Hermite_matrix_complex_field(A_h, n, lda);

    return 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void print_vector(float* A, int n) {
    for (int i = 0; i < n; i++)
        printf("%22.3f\n", A[i]);
}

void print_matrix(float* A, int M, int N, int lda) {
    for (int i = 0; i < M; i++) {
        for (int j = 0; j < N; j++)
            printf(" %8.5f", A[i + j * lda]);
        printf("\n");
    }
    printf("\n");
}

void print_complex_vector(float2* A, int n)
{
    for (int i = 0; i < n; i++) {
        printf("%7.4f + %7.4f*i  ", A[i].x, A[i].y);
    }
}

void print_complex_matrix(int M, int N, float2* A, int lda)
{
    for (int i = 0; i < M; i++)
    {
        for (int j = 0; j < N; j++)
        {
            printf("%9.6f + %9.6f*i ,", A[i + j * lda].x, A[i + j * lda].y);
        }
        printf("\n");
    }

}

void complex_matrix_conjugate_transposition(int n, float2* A, int lda, float2* B, int ldb)
{
    for (int i = 0; i < n; i++) {
        for(int j=0; j<n; j++)
        {
            B[i + j * ldb] = cuConjf(A[j + i * lda]);
        }
    }
}

void complex_gemm(int M, int N, int K, float2* A, int lda, float2* B, int ldb, float2* C, int ldc)
{
    float2 zero_ = make_cuFloatComplex(0.0f, 0.0f);

    for (int i = 0; i < M; i++) {
        for (int j = 0; j < N; j++) {
            float2 sigma = zero_;

            for (int k = 0; k < K; k++) {
                sigma = cuCaddf(sigma, cuCmulf(A[i + k * lda], B[k + j * ldb]));
            }
            C[i + j * ldc] = sigma;
        }
    }
}





/*
octave:37> A
A =

   1.8937 + 0.0000i   1.4574 - 0.2006i   1.6041 + 0.2653i   2.3225 + 0.3367i
   1.4574 + 0.2006i   1.6985 + 0.0000i   1.6143 + 0.2756i   2.4423 + 0.4715i
   1.6041 - 0.2653i   1.6143 - 0.2756i   2.2980 + 0.0000i   2.3027 - 0.2985i
   2.3225 - 0.3367i   2.4423 - 0.4715i   2.3027 + 0.2985i   4.2158 + 0.0000i

octave:38> [u d]=eig(A)
u =

  -0.04847 - 0.31989i  -0.82406 + 0.09126i  -0.10042 + 0.14573i   0.41784 + 0.04485i
  -0.75933 - 0.14197i   0.31451 - 0.31403i  -0.06196 + 0.15423i   0.41544 + 0.07428i
   0.20242 + 0.28441i   0.16901 + 0.16300i  -0.75165 - 0.24049i   0.44600 - 0.03567i
   0.42038 + 0.00000i   0.24482 + 0.00000i   0.56413 + 0.00000i   0.66716 + 0.00000i

d =

Diagonal Matrix

   0.027868          0          0          0
          0   0.447434          0          0
          0          0   0.809093          0
          0          0          0   8.821602

octave:39>




*/




void hermite_jacobi_01(float2* A, int n, int lda, bool cal_Vectors, float2* V, int ldv, float* Sig, float eps, unsigned jt)
{
    set_V_2_E(n, V, ldv);
    printf("V=E=\n");
    print_complex_matrix(n, n, V, ldv);
    unsigned count = 0;

    while (count < jt) {
        count++;
        int i, j;

        i = 0;
        j = 1;
        norm_max_ij(A, n, lda, i, j);

        float s, c, t;
        float2 Aij;
        float norm_Aij;
        float Aii, Ajj;
        float Aii_Ajj;
        float2 s_plus, s_neg;

        Aii = A[i + i * lda].x;
        Ajj = A[j + j * lda].x;
        Aii_Ajj = Aii - Ajj;
        Aij = A[i + j * lda];
        norm_Aij = cuCabsf(Aij);

        t = 2.0f * norm_Aij * signf(Aii_Ajj) / (fabs(Aii_Ajj) + sqrt(Aii_Ajj * Aii_Ajj + 4.0f * norm_Aij * norm_Aij));
        c = 1.0f / sqrt(1 + t * t);
        s = c * t;
        float sDNAij;//s/|Aij|
        sDNAij = s / norm_Aij;
        s_plus = make_cuFloatComplex(sDNAij * Aij.x, sDNAij * Aij.y);
        s_neg = cuConjf(s_plus);

        //A[i + i * lda].x = Aii + t * norm_Aij; A[j + j * lda].x = Ajj - t * norm_Aij;
        float2 cC, sC;
        cC = make_cuFloatComplex(c, 0.0f);
        sC = make_cuFloatComplex(s, 0.0f);

        for (int r = 0; r < n; r++) {// right_rotate  i-th column  j-th column  changed
            float2 Ari, Arj;
            Ari = A[r + i * lda];
            Arj = A[r + j * lda];
            //if(r!=i)
            A[r + i * lda] = cuCaddf(cuCmulf(Ari, cC), cuCmulf(Arj, s_neg));//Ari * c    + Arj * S-
            //if(r!=j)
            A[r + j * lda] = cuCsubf(cuCmulf(Arj, cC), cuCmulf(Ari, s_plus));//Ari *(-S+) + Arj * c
        }
        for (int r = 0; r < n; r++) {// left_rotate i-th row   j-th row changed
            float2 Air, Ajr;
            Air = A[i + r * lda];
            Ajr = A[j + r * lda];

            A[i + r * lda] = cuCaddf(cuCmulf(cC, Air), cuCmulf(s_plus, Ajr));//  c * Air   + S+ * Ajr
            A[j + r * lda] = cuCsubf(cuCmulf(cC, Ajr), cuCmulf(s_neg, Air));// -S-* Air   +  c * Ajr
        }

        if (cal_Vectors) {
            for (int r = 0; r < n; r++) {// right_rotate  i-th column  j-th column  changed
                float2 Vri, Vrj;
                Vri = V[r + i * lda];
                Vrj = V[r + j * lda];
                V[r + i * lda] = cuCaddf(cuCmulf(Vri, cC), cuCmulf(Vrj, s_neg));//Ari * c    + Arj * S-
                V[r + j * lda] = cuCsubf(cuCmulf(Vrj, cC), cuCmulf(Vri, s_plus));//Ari *(-S+) + Arj * c
            }
        }
    }
}



void hermite_jacobi_cycle(float2* A, int n, int lda, bool cal_Vectors, float2* V, int ldv, float* Sig, float eps, unsigned jt){

    set_V_2_E(n, V, ldv);
    printf("V=E=\n");
    print_complex_matrix(n, n, V, ldv);
    unsigned count = 0;

    while (count < jt) {
        count++;
        int i, j;

        i = 8;
        j = 9;
        norm_max_ij(A, n, lda, i, j);
        //printf("max_ele A(%d,%d) %d-th = %e+%e *i       ",i,j,count, A[i + j*lda].x, A[i+j*lda].y);
        printf("max_ele A(%d,%d) %d-th  ", i, j, count);

        float s, c, t;
        float2 Aij;
        float norm_Aij;
        float Aii, Ajj;
        float Aii_Ajj;
        float2 s_plus, s_neg;

        Aii = A[i + i * lda].x;
        Ajj = A[j + j * lda].x;
        Aii_Ajj = Aii - Ajj;
        Aij = A[i + j * lda];
        norm_Aij = cuCabsf(Aij);
        if (norm_Aij < eps)break;

        t = 2.0f * norm_Aij * signf(Aii_Ajj) / (fabs(Aii_Ajj) + sqrt(Aii_Ajj * Aii_Ajj + 4.0f * norm_Aij * norm_Aij));
        c = 1.0f / sqrt(1 + t * t);
        s = c * t;
        float sDNAij;//s/|Aij|
        sDNAij = s / norm_Aij;
        s_plus = make_cuFloatComplex(sDNAij * Aij.x, sDNAij * Aij.y);
        s_neg = cuConjf(s_plus);

        //A[i + i * lda].x = Aii + t * norm_Aij; A[j + j * lda].x = Ajj - t * norm_Aij;
        float2 cC, sC;
        cC = make_cuFloatComplex(c, 0.0f);
        sC = make_cuFloatComplex(s, 0.0f);

        for (int r = 0; r < n; r++) {// right_rotate  i-th column  j-th column  changed
            float2 Ari, Arj;
            Ari = A[r + i * lda];
            Arj = A[r + j * lda];
            //if(r!=i)
            A[r + i * lda] = cuCaddf(cuCmulf(Ari, cC), cuCmulf(Arj, s_neg));//Ari * c    + Arj * S-
            //if(r!=j)
            A[r + j * lda] = cuCsubf(cuCmulf(Arj, cC), cuCmulf(Ari, s_plus));//Ari *(-S+) + Arj * c
        }
        for (int r = 0; r < n; r++) {// left_rotate i-th row   j-th row changed
            float2 Air, Ajr;
            Air = A[i + r * lda];
            Ajr = A[j + r * lda];

            A[i + r * lda] = cuCaddf(cuCmulf(cC, Air), cuCmulf(s_plus, Ajr));//  c * Air   + S+ * Ajr
            A[j + r * lda] = cuCsubf(cuCmulf(cC, Ajr), cuCmulf(s_neg, Air));// -S-* Air   +  c * Ajr
        }

        A[i + j * lda] = zero__;
        A[j + i * lda] = zero__;
        float A_i_i = c * c * Aii + 2.0f * c * s * norm_Aij + s * s * Ajj;
        // printf("A[i,i] %d= %f\n", count, A[i+i*lda].x);
        // printf("A[i,i] %d= %f\n", count, A_i_i);
        float a_ii_look = Aii + t * norm_Aij;
        // printf("a_ii_ %d = %f\n", count, a_ii_look);

        float A_j_j = s * s * Aii - 2.0f * c * s * norm_Aij + c * c * Ajj;
        // printf("A[j,j] %d= %f\n", count, A[j + j * lda].x);
        // printf("A[j,j] %d= %f\n", count, A_j_j);
        float a_jj_look = Ajj - t * norm_Aij;
        //printf("a_jj_ %d = %f\n", count, a_jj_look);

        //A[i + i * lda].x = A_i_i;        A[i + i * lda].y = 0.0f;
        //A[j + j * lda].x = A_j_j;        A[j + j * lda].y = 0.0f;
        A[i + i * lda].x = a_ii_look;        A[i + i * lda].y = 0.0f;
        A[j + j * lda].x = a_jj_look;        A[j + j * lda].y = 0.0f;

        if (cal_Vectors) {
            for (int r = 0; r < n; r++) {// right_rotate  i-th column  j-th column  changed
                float2 Vri, Vrj;
                Vri = V[r + i * lda];
                Vrj = V[r + j * lda];
                V[r + i * lda] = cuCaddf(cuCmulf(Vri, cC), cuCmulf(Vrj, s_neg));//Ari * c    + Arj * S-
                V[r + j * lda] = cuCsubf(cuCmulf(Vrj, cC), cuCmulf(Vri, s_plus));//Ari *(-S+) + Arj * c
            }
        }
    }

    for (int dia = 0; dia < n; dia++) {
        Sig[dia] = A[dia + dia * lda].x;
    }
}




